
usb-test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ab8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08006c64  08006c64  00016c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ccc  08006ccc  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08006ccc  08006ccc  00016ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cd4  08006cd4  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cd4  08006cd4  00016cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cd8  08006cd8  00016cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08006cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001c04  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20001d00  20001d00  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d682  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a3a  00000000  00000000  0002d7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b68  00000000  00000000  00030230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000860  00000000  00000000  00030d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024f98  00000000  00000000  000315f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000fab2  00000000  00000000  00056590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d2dba  00000000  00000000  00066042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002cd4  00000000  00000000  00138dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  0013bad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000fc 	.word	0x200000fc
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006c4c 	.word	0x08006c4c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000100 	.word	0x20000100
 80001e8:	08006c4c 	.word	0x08006c4c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	607b      	str	r3, [r7, #4]
 80004f2:	4b10      	ldr	r3, [pc, #64]	; (8000534 <MX_GPIO_Init+0x4c>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a0f      	ldr	r2, [pc, #60]	; (8000534 <MX_GPIO_Init+0x4c>)
 80004f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <MX_GPIO_Init+0x4c>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	603b      	str	r3, [r7, #0]
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <MX_GPIO_Init+0x4c>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a08      	ldr	r2, [pc, #32]	; (8000534 <MX_GPIO_Init+0x4c>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <MX_GPIO_Init+0x4c>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	603b      	str	r3, [r7, #0]
 8000524:	683b      	ldr	r3, [r7, #0]

}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40023800 	.word	0x40023800

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 f921 	bl	8000784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 f815 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f7ff ffcf 	bl	80004e8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800054a:	f005 fe39 	bl	80061c0 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t buffer[] = {"Hello USB! \r\n"};
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <main+0x34>)
 8000550:	463c      	mov	r4, r7
 8000552:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000554:	c407      	stmia	r4!, {r0, r1, r2}
 8000556:	8023      	strh	r3, [r4, #0]
	  CDC_Transmit_FS(buffer, sizeof(buffer));
 8000558:	463b      	mov	r3, r7
 800055a:	210e      	movs	r1, #14
 800055c:	4618      	mov	r0, r3
 800055e:	f005 feed 	bl	800633c <CDC_Transmit_FS>
	  HAL_Delay(1000);
 8000562:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000566:	f000 f97f 	bl	8000868 <HAL_Delay>
  {
 800056a:	e7f0      	b.n	800054e <main+0x16>
 800056c:	08006c64 	.word	0x08006c64

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2230      	movs	r2, #48	; 0x30
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f006 fb38 	bl	8006bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	4b29      	ldr	r3, [pc, #164]	; (8000640 <SystemClock_Config+0xd0>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	4a28      	ldr	r2, [pc, #160]	; (8000640 <SystemClock_Config+0xd0>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	; 0x40
 80005a4:	4b26      	ldr	r3, [pc, #152]	; (8000640 <SystemClock_Config+0xd0>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b23      	ldr	r3, [pc, #140]	; (8000644 <SystemClock_Config+0xd4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005bc:	4a21      	ldr	r2, [pc, #132]	; (8000644 <SystemClock_Config+0xd4>)
 80005be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <SystemClock_Config+0xd4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d0:	2301      	movs	r3, #1
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005e8:	2360      	movs	r3, #96	; 0x60
 80005ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80005ec:	2306      	movs	r3, #6
 80005ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f0:	2304      	movs	r3, #4
 80005f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0320 	add.w	r3, r7, #32
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 fe67 	bl	80022cc <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000604:	f000 f820 	bl	8000648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060c:	2302      	movs	r3, #2
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000614:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000618:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800061a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800061e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f002 f8c8 	bl	80027bc <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000632:	f000 f809 	bl	8000648 <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	; 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800064c:	b672      	cpsid	i
}
 800064e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000650:	e7fe      	b.n	8000650 <Error_Handler+0x8>
	...

08000654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <HAL_MspInit+0x4c>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000662:	4a0f      	ldr	r2, [pc, #60]	; (80006a0 <HAL_MspInit+0x4c>)
 8000664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000668:	6453      	str	r3, [r2, #68]	; 0x44
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <HAL_MspInit+0x4c>)
 800066c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <HAL_MspInit+0x4c>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	4a08      	ldr	r2, [pc, #32]	; (80006a0 <HAL_MspInit+0x4c>)
 8000680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000684:	6413      	str	r3, [r2, #64]	; 0x40
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <HAL_MspInit+0x4c>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800

080006a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006a8:	e7fe      	b.n	80006a8 <NMI_Handler+0x4>

080006aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <HardFault_Handler+0x4>

080006b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <MemManage_Handler+0x4>

080006b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ba:	e7fe      	b.n	80006ba <BusFault_Handler+0x4>

080006bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <UsageFault_Handler+0x4>

080006c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f0:	f000 f89a 	bl	8000828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006fc:	4802      	ldr	r0, [pc, #8]	; (8000708 <OTG_FS_IRQHandler+0x10>)
 80006fe:	f000 fcd9 	bl	80010b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200015fc 	.word	0x200015fc

0800070c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <SystemInit+0x20>)
 8000712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000716:	4a05      	ldr	r2, [pc, #20]	; (800072c <SystemInit+0x20>)
 8000718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800071c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000768 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000734:	f7ff ffea 	bl	800070c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800073a:	490d      	ldr	r1, [pc, #52]	; (8000770 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800073c:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000740:	e002      	b.n	8000748 <LoopCopyDataInit>

08000742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000746:	3304      	adds	r3, #4

08000748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800074c:	d3f9      	bcc.n	8000742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000750:	4c0a      	ldr	r4, [pc, #40]	; (800077c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000754:	e001      	b.n	800075a <LoopFillZerobss>

08000756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000758:	3204      	adds	r2, #4

0800075a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800075c:	d3fb      	bcc.n	8000756 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800075e:	f006 fa51 	bl	8006c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000762:	f7ff fee9 	bl	8000538 <main>
  bx  lr    
 8000766:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000768:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000774:	08006cdc 	.word	0x08006cdc
  ldr r2, =_sbss
 8000778:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 800077c:	20001d00 	.word	0x20001d00

08000780 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC_IRQHandler>
	...

08000784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <HAL_Init+0x40>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a0d      	ldr	r2, [pc, #52]	; (80007c4 <HAL_Init+0x40>)
 800078e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000792:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <HAL_Init+0x40>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <HAL_Init+0x40>)
 800079a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800079e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <HAL_Init+0x40>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <HAL_Init+0x40>)
 80007a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f000 f94f 	bl	8000a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b2:	200f      	movs	r0, #15
 80007b4:	f000 f808 	bl	80007c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b8:	f7ff ff4c 	bl	8000654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023c00 	.word	0x40023c00

080007c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_InitTick+0x54>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_InitTick+0x58>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007de:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f967 	bl	8000aba <HAL_SYSTICK_Config>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00e      	b.n	8000814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b0f      	cmp	r3, #15
 80007fa:	d80a      	bhi.n	8000812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fc:	2200      	movs	r2, #0
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	f04f 30ff 	mov.w	r0, #4294967295
 8000804:	f000 f92f 	bl	8000a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000808:	4a06      	ldr	r2, [pc, #24]	; (8000824 <HAL_InitTick+0x5c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800080e:	2300      	movs	r3, #0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000000 	.word	0x20000000
 8000820:	20000008 	.word	0x20000008
 8000824:	20000004 	.word	0x20000004

08000828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_IncTick+0x20>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_IncTick+0x24>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
 8000838:	4a04      	ldr	r2, [pc, #16]	; (800084c <HAL_IncTick+0x24>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000008 	.word	0x20000008
 800084c:	20000118 	.word	0x20000118

08000850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return uwTick;
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <HAL_GetTick+0x14>)
 8000856:	681b      	ldr	r3, [r3, #0]
}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	20000118 	.word	0x20000118

08000868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000870:	f7ff ffee 	bl	8000850 <HAL_GetTick>
 8000874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000880:	d005      	beq.n	800088e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000882:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <HAL_Delay+0x44>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	461a      	mov	r2, r3
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	4413      	add	r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800088e:	bf00      	nop
 8000890:	f7ff ffde 	bl	8000850 <HAL_GetTick>
 8000894:	4602      	mov	r2, r0
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	429a      	cmp	r2, r3
 800089e:	d8f7      	bhi.n	8000890 <HAL_Delay+0x28>
  {
  }
}
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000008 	.word	0x20000008

080008b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008cc:	4013      	ands	r3, r2
 80008ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008e2:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	60d3      	str	r3, [r2, #12]
}
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <__NVIC_GetPriorityGrouping+0x18>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	0a1b      	lsrs	r3, r3, #8
 8000902:	f003 0307 	and.w	r3, r3, #7
}
 8000906:	4618      	mov	r0, r3
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	2b00      	cmp	r3, #0
 8000924:	db0b      	blt.n	800093e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 021f 	and.w	r2, r3, #31
 800092c:	4907      	ldr	r1, [pc, #28]	; (800094c <__NVIC_EnableIRQ+0x38>)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	095b      	lsrs	r3, r3, #5
 8000934:	2001      	movs	r0, #1
 8000936:	fa00 f202 	lsl.w	r2, r0, r2
 800093a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000e100 	.word	0xe000e100

08000950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	6039      	str	r1, [r7, #0]
 800095a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	db0a      	blt.n	800097a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	b2da      	uxtb	r2, r3
 8000968:	490c      	ldr	r1, [pc, #48]	; (800099c <__NVIC_SetPriority+0x4c>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	0112      	lsls	r2, r2, #4
 8000970:	b2d2      	uxtb	r2, r2
 8000972:	440b      	add	r3, r1
 8000974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000978:	e00a      	b.n	8000990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4908      	ldr	r1, [pc, #32]	; (80009a0 <__NVIC_SetPriority+0x50>)
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	f003 030f 	and.w	r3, r3, #15
 8000986:	3b04      	subs	r3, #4
 8000988:	0112      	lsls	r2, r2, #4
 800098a:	b2d2      	uxtb	r2, r2
 800098c:	440b      	add	r3, r1
 800098e:	761a      	strb	r2, [r3, #24]
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000e100 	.word	0xe000e100
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b089      	sub	sp, #36	; 0x24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	f1c3 0307 	rsb	r3, r3, #7
 80009be:	2b04      	cmp	r3, #4
 80009c0:	bf28      	it	cs
 80009c2:	2304      	movcs	r3, #4
 80009c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3304      	adds	r3, #4
 80009ca:	2b06      	cmp	r3, #6
 80009cc:	d902      	bls.n	80009d4 <NVIC_EncodePriority+0x30>
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3b03      	subs	r3, #3
 80009d2:	e000      	b.n	80009d6 <NVIC_EncodePriority+0x32>
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	f04f 32ff 	mov.w	r2, #4294967295
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43da      	mvns	r2, r3
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	401a      	ands	r2, r3
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ec:	f04f 31ff 	mov.w	r1, #4294967295
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	43d9      	mvns	r1, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	4313      	orrs	r3, r2
         );
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3724      	adds	r7, #36	; 0x24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
	...

08000a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a1c:	d301      	bcc.n	8000a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00f      	b.n	8000a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <SysTick_Config+0x40>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f7ff ff8e 	bl	8000950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <SysTick_Config+0x40>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <SysTick_Config+0x40>)
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	e000e010 	.word	0xe000e010

08000a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ff29 	bl	80008b0 <__NVIC_SetPriorityGrouping>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b086      	sub	sp, #24
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
 8000a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a78:	f7ff ff3e 	bl	80008f8 <__NVIC_GetPriorityGrouping>
 8000a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	68b9      	ldr	r1, [r7, #8]
 8000a82:	6978      	ldr	r0, [r7, #20]
 8000a84:	f7ff ff8e 	bl	80009a4 <NVIC_EncodePriority>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff5d 	bl	8000950 <__NVIC_SetPriority>
}
 8000a96:	bf00      	nop
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff31 	bl	8000914 <__NVIC_EnableIRQ>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ffa2 	bl	8000a0c <SysTick_Config>
 8000ac8:	4603      	mov	r3, r0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b089      	sub	sp, #36	; 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
 8000aee:	e177      	b.n	8000de0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000af0:	2201      	movs	r2, #1
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	4013      	ands	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	f040 8166 	bne.w	8000dda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 0303 	and.w	r3, r3, #3
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d005      	beq.n	8000b26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d130      	bne.n	8000b88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	2203      	movs	r2, #3
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	69ba      	ldr	r2, [r7, #24]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	43db      	mvns	r3, r3
 8000b66:	69ba      	ldr	r2, [r7, #24]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	091b      	lsrs	r3, r3, #4
 8000b72:	f003 0201 	and.w	r2, r3, #1
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	d017      	beq.n	8000bc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	69ba      	ldr	r2, [r7, #24]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d123      	bne.n	8000c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	08da      	lsrs	r2, r3, #3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3208      	adds	r2, #8
 8000bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	f003 0307 	and.w	r3, r3, #7
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	220f      	movs	r2, #15
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	691a      	ldr	r2, [r3, #16]
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	08da      	lsrs	r2, r3, #3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3208      	adds	r2, #8
 8000c12:	69b9      	ldr	r1, [r7, #24]
 8000c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	2203      	movs	r2, #3
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f003 0203 	and.w	r2, r3, #3
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f000 80c0 	beq.w	8000dda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b66      	ldr	r3, [pc, #408]	; (8000df8 <HAL_GPIO_Init+0x324>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	4a65      	ldr	r2, [pc, #404]	; (8000df8 <HAL_GPIO_Init+0x324>)
 8000c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c68:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6a:	4b63      	ldr	r3, [pc, #396]	; (8000df8 <HAL_GPIO_Init+0x324>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c76:	4a61      	ldr	r2, [pc, #388]	; (8000dfc <HAL_GPIO_Init+0x328>)
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	089b      	lsrs	r3, r3, #2
 8000c7c:	3302      	adds	r3, #2
 8000c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f003 0303 	and.w	r3, r3, #3
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	220f      	movs	r2, #15
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4013      	ands	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a58      	ldr	r2, [pc, #352]	; (8000e00 <HAL_GPIO_Init+0x32c>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d037      	beq.n	8000d12 <HAL_GPIO_Init+0x23e>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a57      	ldr	r2, [pc, #348]	; (8000e04 <HAL_GPIO_Init+0x330>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d031      	beq.n	8000d0e <HAL_GPIO_Init+0x23a>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a56      	ldr	r2, [pc, #344]	; (8000e08 <HAL_GPIO_Init+0x334>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d02b      	beq.n	8000d0a <HAL_GPIO_Init+0x236>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a55      	ldr	r2, [pc, #340]	; (8000e0c <HAL_GPIO_Init+0x338>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d025      	beq.n	8000d06 <HAL_GPIO_Init+0x232>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a54      	ldr	r2, [pc, #336]	; (8000e10 <HAL_GPIO_Init+0x33c>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d01f      	beq.n	8000d02 <HAL_GPIO_Init+0x22e>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a53      	ldr	r2, [pc, #332]	; (8000e14 <HAL_GPIO_Init+0x340>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d019      	beq.n	8000cfe <HAL_GPIO_Init+0x22a>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a52      	ldr	r2, [pc, #328]	; (8000e18 <HAL_GPIO_Init+0x344>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d013      	beq.n	8000cfa <HAL_GPIO_Init+0x226>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a51      	ldr	r2, [pc, #324]	; (8000e1c <HAL_GPIO_Init+0x348>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d00d      	beq.n	8000cf6 <HAL_GPIO_Init+0x222>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a50      	ldr	r2, [pc, #320]	; (8000e20 <HAL_GPIO_Init+0x34c>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d007      	beq.n	8000cf2 <HAL_GPIO_Init+0x21e>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a4f      	ldr	r2, [pc, #316]	; (8000e24 <HAL_GPIO_Init+0x350>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d101      	bne.n	8000cee <HAL_GPIO_Init+0x21a>
 8000cea:	2309      	movs	r3, #9
 8000cec:	e012      	b.n	8000d14 <HAL_GPIO_Init+0x240>
 8000cee:	230a      	movs	r3, #10
 8000cf0:	e010      	b.n	8000d14 <HAL_GPIO_Init+0x240>
 8000cf2:	2308      	movs	r3, #8
 8000cf4:	e00e      	b.n	8000d14 <HAL_GPIO_Init+0x240>
 8000cf6:	2307      	movs	r3, #7
 8000cf8:	e00c      	b.n	8000d14 <HAL_GPIO_Init+0x240>
 8000cfa:	2306      	movs	r3, #6
 8000cfc:	e00a      	b.n	8000d14 <HAL_GPIO_Init+0x240>
 8000cfe:	2305      	movs	r3, #5
 8000d00:	e008      	b.n	8000d14 <HAL_GPIO_Init+0x240>
 8000d02:	2304      	movs	r3, #4
 8000d04:	e006      	b.n	8000d14 <HAL_GPIO_Init+0x240>
 8000d06:	2303      	movs	r3, #3
 8000d08:	e004      	b.n	8000d14 <HAL_GPIO_Init+0x240>
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	e002      	b.n	8000d14 <HAL_GPIO_Init+0x240>
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e000      	b.n	8000d14 <HAL_GPIO_Init+0x240>
 8000d12:	2300      	movs	r3, #0
 8000d14:	69fa      	ldr	r2, [r7, #28]
 8000d16:	f002 0203 	and.w	r2, r2, #3
 8000d1a:	0092      	lsls	r2, r2, #2
 8000d1c:	4093      	lsls	r3, r2
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d24:	4935      	ldr	r1, [pc, #212]	; (8000dfc <HAL_GPIO_Init+0x328>)
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	089b      	lsrs	r3, r3, #2
 8000d2a:	3302      	adds	r3, #2
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d32:	4b3d      	ldr	r3, [pc, #244]	; (8000e28 <HAL_GPIO_Init+0x354>)
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d56:	4a34      	ldr	r2, [pc, #208]	; (8000e28 <HAL_GPIO_Init+0x354>)
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d5c:	4b32      	ldr	r3, [pc, #200]	; (8000e28 <HAL_GPIO_Init+0x354>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	43db      	mvns	r3, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d003      	beq.n	8000d80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d80:	4a29      	ldr	r2, [pc, #164]	; (8000e28 <HAL_GPIO_Init+0x354>)
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d86:	4b28      	ldr	r3, [pc, #160]	; (8000e28 <HAL_GPIO_Init+0x354>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	4013      	ands	r3, r2
 8000d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d003      	beq.n	8000daa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000daa:	4a1f      	ldr	r2, [pc, #124]	; (8000e28 <HAL_GPIO_Init+0x354>)
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000db0:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <HAL_GPIO_Init+0x354>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dd4:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <HAL_GPIO_Init+0x354>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	61fb      	str	r3, [r7, #28]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	2b0f      	cmp	r3, #15
 8000de4:	f67f ae84 	bls.w	8000af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3724      	adds	r7, #36	; 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40013800 	.word	0x40013800
 8000e00:	40020000 	.word	0x40020000
 8000e04:	40020400 	.word	0x40020400
 8000e08:	40020800 	.word	0x40020800
 8000e0c:	40020c00 	.word	0x40020c00
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40021400 	.word	0x40021400
 8000e18:	40021800 	.word	0x40021800
 8000e1c:	40021c00 	.word	0x40021c00
 8000e20:	40022000 	.word	0x40022000
 8000e24:	40022400 	.word	0x40022400
 8000e28:	40013c00 	.word	0x40013c00

08000e2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af02      	add	r7, sp, #8
 8000e32:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d101      	bne.n	8000e3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e101      	b.n	8001042 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d106      	bne.n	8000e5e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f005 fbb7 	bl	80065cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2203      	movs	r2, #3
 8000e62:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e6c:	d102      	bne.n	8000e74 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f001 ffae 	bl	8002dda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6818      	ldr	r0, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7c1a      	ldrb	r2, [r3, #16]
 8000e86:	f88d 2000 	strb.w	r2, [sp]
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e8e:	f001 fe8d 	bl	8002bac <USB_CoreInit>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d005      	beq.n	8000ea4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e0ce      	b.n	8001042 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 ffa6 	bl	8002dfc <USB_SetCurrentMode>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d005      	beq.n	8000ec2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2202      	movs	r2, #2
 8000eba:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e0bf      	b.n	8001042 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	e04a      	b.n	8000f5e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ec8:	7bfa      	ldrb	r2, [r7, #15]
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	4413      	add	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	3315      	adds	r3, #21
 8000ed8:	2201      	movs	r2, #1
 8000eda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000edc:	7bfa      	ldrb	r2, [r7, #15]
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	4413      	add	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	440b      	add	r3, r1
 8000eea:	3314      	adds	r3, #20
 8000eec:	7bfa      	ldrb	r2, [r7, #15]
 8000eee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ef0:	7bfa      	ldrb	r2, [r7, #15]
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	b298      	uxth	r0, r3
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	4413      	add	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	332e      	adds	r3, #46	; 0x2e
 8000f04:	4602      	mov	r2, r0
 8000f06:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f08:	7bfa      	ldrb	r2, [r7, #15]
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	4413      	add	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	440b      	add	r3, r1
 8000f16:	3318      	adds	r3, #24
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f1c:	7bfa      	ldrb	r2, [r7, #15]
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	4613      	mov	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	4413      	add	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	440b      	add	r3, r1
 8000f2a:	331c      	adds	r3, #28
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f30:	7bfa      	ldrb	r2, [r7, #15]
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	4613      	mov	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4413      	add	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	3320      	adds	r3, #32
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f44:	7bfa      	ldrb	r2, [r7, #15]
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	4413      	add	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	440b      	add	r3, r1
 8000f52:	3324      	adds	r3, #36	; 0x24
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	73fb      	strb	r3, [r7, #15]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	791b      	ldrb	r3, [r3, #4]
 8000f62:	7bfa      	ldrb	r2, [r7, #15]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d3af      	bcc.n	8000ec8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73fb      	strb	r3, [r7, #15]
 8000f6c:	e044      	b.n	8000ff8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f6e:	7bfa      	ldrb	r2, [r7, #15]
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	4613      	mov	r3, r2
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	4413      	add	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f203 2355 	addw	r3, r3, #597	; 0x255
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	4413      	add	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8000f96:	7bfa      	ldrb	r2, [r7, #15]
 8000f98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f9a:	7bfa      	ldrb	r2, [r7, #15]
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	4413      	add	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000fc6:	7bfa      	ldrb	r2, [r7, #15]
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	4413      	add	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	791b      	ldrb	r3, [r3, #4]
 8000ffc:	7bfa      	ldrb	r2, [r7, #15]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d3b5      	bcc.n	8000f6e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6818      	ldr	r0, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7c1a      	ldrb	r2, [r3, #16]
 800100a:	f88d 2000 	strb.w	r2, [sp]
 800100e:	3304      	adds	r3, #4
 8001010:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001012:	f001 ff3f 	bl	8002e94 <USB_DevInit>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d005      	beq.n	8001028 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2202      	movs	r2, #2
 8001020:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e00c      	b.n	8001042 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f002 ff83 	bl	8003f46 <USB_DevDisconnect>

  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800105e:	2b01      	cmp	r3, #1
 8001060:	d101      	bne.n	8001066 <HAL_PCD_Start+0x1c>
 8001062:	2302      	movs	r3, #2
 8001064:	e022      	b.n	80010ac <HAL_PCD_Start+0x62>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2201      	movs	r2, #1
 800106a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001076:	2b00      	cmp	r3, #0
 8001078:	d009      	beq.n	800108e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800107e:	2b01      	cmp	r3, #1
 8001080:	d105      	bne.n	800108e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001086:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f001 fe90 	bl	8002db8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f002 ff31 	bl	8003f04 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b08d      	sub	sp, #52	; 0x34
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80010c2:	6a3b      	ldr	r3, [r7, #32]
 80010c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 ffef 	bl	80040ae <USB_GetMode>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f040 848c 	bne.w	80019f0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f002 ff53 	bl	8003f88 <USB_ReadInterrupts>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 8482 	beq.w	80019ee <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	0a1b      	lsrs	r3, r3, #8
 80010f4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f002 ff40 	bl	8003f88 <USB_ReadInterrupts>
 8001108:	4603      	mov	r3, r0
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b02      	cmp	r3, #2
 8001110:	d107      	bne.n	8001122 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	695a      	ldr	r2, [r3, #20]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f002 0202 	and.w	r2, r2, #2
 8001120:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f002 ff2e 	bl	8003f88 <USB_ReadInterrupts>
 800112c:	4603      	mov	r3, r0
 800112e:	f003 0310 	and.w	r3, r3, #16
 8001132:	2b10      	cmp	r3, #16
 8001134:	d161      	bne.n	80011fa <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	699a      	ldr	r2, [r3, #24]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0210 	bic.w	r2, r2, #16
 8001144:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	f003 020f 	and.w	r2, r3, #15
 8001152:	4613      	mov	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	4413      	add	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	3304      	adds	r3, #4
 8001164:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	0c5b      	lsrs	r3, r3, #17
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	2b02      	cmp	r3, #2
 8001170:	d124      	bne.n	80011bc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001178:	4013      	ands	r3, r2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d035      	beq.n	80011ea <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001188:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800118c:	b29b      	uxth	r3, r3
 800118e:	461a      	mov	r2, r3
 8001190:	6a38      	ldr	r0, [r7, #32]
 8001192:	f002 fd65 	bl	8003c60 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	68da      	ldr	r2, [r3, #12]
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	091b      	lsrs	r3, r3, #4
 800119e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011a2:	441a      	add	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	695a      	ldr	r2, [r3, #20]
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	091b      	lsrs	r3, r3, #4
 80011b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011b4:	441a      	add	r2, r3
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	615a      	str	r2, [r3, #20]
 80011ba:	e016      	b.n	80011ea <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	0c5b      	lsrs	r3, r3, #17
 80011c0:	f003 030f 	and.w	r3, r3, #15
 80011c4:	2b06      	cmp	r3, #6
 80011c6:	d110      	bne.n	80011ea <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80011ce:	2208      	movs	r2, #8
 80011d0:	4619      	mov	r1, r3
 80011d2:	6a38      	ldr	r0, [r7, #32]
 80011d4:	f002 fd44 	bl	8003c60 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	695a      	ldr	r2, [r3, #20]
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	091b      	lsrs	r3, r3, #4
 80011e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011e4:	441a      	add	r2, r3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	699a      	ldr	r2, [r3, #24]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f042 0210 	orr.w	r2, r2, #16
 80011f8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f002 fec2 	bl	8003f88 <USB_ReadInterrupts>
 8001204:	4603      	mov	r3, r0
 8001206:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800120a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800120e:	f040 80a7 	bne.w	8001360 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f002 fec7 	bl	8003fae <USB_ReadDevAllOutEpInterrupt>
 8001220:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001222:	e099      	b.n	8001358 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 808e 	beq.w	800134c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	4611      	mov	r1, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f002 feeb 	bl	8004016 <USB_ReadDevOutEPInterrupt>
 8001240:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d00c      	beq.n	8001266 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	015a      	lsls	r2, r3, #5
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	4413      	add	r3, r2
 8001254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001258:	461a      	mov	r2, r3
 800125a:	2301      	movs	r3, #1
 800125c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800125e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 fea1 	bl	8001fa8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	2b00      	cmp	r3, #0
 800126e:	d00c      	beq.n	800128a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	015a      	lsls	r2, r3, #5
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	4413      	add	r3, r2
 8001278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800127c:	461a      	mov	r2, r3
 800127e:	2308      	movs	r3, #8
 8001280:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001282:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 ff77 	bl	8002178 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	2b00      	cmp	r3, #0
 8001292:	d008      	beq.n	80012a6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	015a      	lsls	r2, r3, #5
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	4413      	add	r3, r2
 800129c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012a0:	461a      	mov	r2, r3
 80012a2:	2310      	movs	r3, #16
 80012a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d030      	beq.n	8001312 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80012b0:	6a3b      	ldr	r3, [r7, #32]
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b8:	2b80      	cmp	r3, #128	; 0x80
 80012ba:	d109      	bne.n	80012d0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	69fa      	ldr	r2, [r7, #28]
 80012c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ce:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80012d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012d2:	4613      	mov	r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	4413      	add	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	3304      	adds	r3, #4
 80012e4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	78db      	ldrb	r3, [r3, #3]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d108      	bne.n	8001300 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	2200      	movs	r2, #0
 80012f2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	4619      	mov	r1, r3
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f005 fa6c 	bl	80067d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	015a      	lsls	r2, r3, #5
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	4413      	add	r3, r2
 8001308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800130c:	461a      	mov	r2, r3
 800130e:	2302      	movs	r3, #2
 8001310:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	f003 0320 	and.w	r3, r3, #32
 8001318:	2b00      	cmp	r3, #0
 800131a:	d008      	beq.n	800132e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	015a      	lsls	r2, r3, #5
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	4413      	add	r3, r2
 8001324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001328:	461a      	mov	r2, r3
 800132a:	2320      	movs	r3, #32
 800132c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d009      	beq.n	800134c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133a:	015a      	lsls	r2, r3, #5
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	4413      	add	r3, r2
 8001340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001344:	461a      	mov	r2, r3
 8001346:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800134a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	3301      	adds	r3, #1
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001354:	085b      	lsrs	r3, r3, #1
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135a:	2b00      	cmp	r3, #0
 800135c:	f47f af62 	bne.w	8001224 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f002 fe0f 	bl	8003f88 <USB_ReadInterrupts>
 800136a:	4603      	mov	r3, r0
 800136c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001370:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001374:	f040 80db 	bne.w	800152e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f002 fe30 	bl	8003fe2 <USB_ReadDevAllInEpInterrupt>
 8001382:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001388:	e0cd      	b.n	8001526 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800138a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 80c2 	beq.w	800151a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	4611      	mov	r1, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f002 fe56 	bl	8004052 <USB_ReadDevInEPInterrupt>
 80013a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d057      	beq.n	8001462 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	f003 030f 	and.w	r3, r3, #15
 80013b8:	2201      	movs	r2, #1
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69f9      	ldr	r1, [r7, #28]
 80013ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80013d2:	4013      	ands	r3, r2
 80013d4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	015a      	lsls	r2, r3, #5
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	4413      	add	r3, r2
 80013de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013e2:	461a      	mov	r2, r3
 80013e4:	2301      	movs	r3, #1
 80013e6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	799b      	ldrb	r3, [r3, #6]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d132      	bne.n	8001456 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f4:	4613      	mov	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4413      	add	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	3320      	adds	r3, #32
 8001400:	6819      	ldr	r1, [r3, #0]
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001406:	4613      	mov	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4403      	add	r3, r0
 8001410:	331c      	adds	r3, #28
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4419      	add	r1, r3
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141a:	4613      	mov	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4403      	add	r3, r0
 8001424:	3320      	adds	r3, #32
 8001426:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	2b00      	cmp	r3, #0
 800142c:	d113      	bne.n	8001456 <HAL_PCD_IRQHandler+0x3a2>
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001432:	4613      	mov	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4413      	add	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	440b      	add	r3, r1
 800143c:	3324      	adds	r3, #36	; 0x24
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d108      	bne.n	8001456 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800144e:	461a      	mov	r2, r3
 8001450:	2101      	movs	r1, #1
 8001452:	f002 fe5d 	bl	8004110 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	b2db      	uxtb	r3, r3
 800145a:	4619      	mov	r1, r3
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f005 f936 	bl	80066ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	f003 0308 	and.w	r3, r3, #8
 8001468:	2b00      	cmp	r3, #0
 800146a:	d008      	beq.n	800147e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	015a      	lsls	r2, r3, #5
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	4413      	add	r3, r2
 8001474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001478:	461a      	mov	r2, r3
 800147a:	2308      	movs	r3, #8
 800147c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	2b00      	cmp	r3, #0
 8001486:	d008      	beq.n	800149a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	015a      	lsls	r2, r3, #5
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	4413      	add	r3, r2
 8001490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001494:	461a      	mov	r2, r3
 8001496:	2310      	movs	r3, #16
 8001498:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d008      	beq.n	80014b6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	015a      	lsls	r2, r3, #5
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	4413      	add	r3, r2
 80014ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014b0:	461a      	mov	r2, r3
 80014b2:	2340      	movs	r3, #64	; 0x40
 80014b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d023      	beq.n	8001508 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80014c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014c2:	6a38      	ldr	r0, [r7, #32]
 80014c4:	f001 fe4a 	bl	800315c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80014c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ca:	4613      	mov	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	4413      	add	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	3310      	adds	r3, #16
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	4413      	add	r3, r2
 80014d8:	3304      	adds	r3, #4
 80014da:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	78db      	ldrb	r3, [r3, #3]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d108      	bne.n	80014f6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	2200      	movs	r2, #0
 80014e8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	4619      	mov	r1, r3
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f005 f983 	bl	80067fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	015a      	lsls	r2, r3, #5
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	4413      	add	r3, r2
 80014fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001502:	461a      	mov	r2, r3
 8001504:	2302      	movs	r3, #2
 8001506:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001512:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 fcbb 	bl	8001e90 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	3301      	adds	r3, #1
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001522:	085b      	lsrs	r3, r3, #1
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001528:	2b00      	cmp	r3, #0
 800152a:	f47f af2e 	bne.w	800138a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f002 fd28 	bl	8003f88 <USB_ReadInterrupts>
 8001538:	4603      	mov	r3, r0
 800153a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800153e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001542:	d122      	bne.n	800158a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	69fa      	ldr	r2, [r7, #28]
 800154e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800155e:	2b01      	cmp	r3, #1
 8001560:	d108      	bne.n	8001574 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800156a:	2100      	movs	r1, #0
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 fea1 	bl	80022b4 <HAL_PCDEx_LPM_Callback>
 8001572:	e002      	b.n	800157a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f005 f921 	bl	80067bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	695a      	ldr	r2, [r3, #20]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001588:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f002 fcfa 	bl	8003f88 <USB_ReadInterrupts>
 8001594:	4603      	mov	r3, r0
 8001596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800159a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800159e:	d112      	bne.n	80015c6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d102      	bne.n	80015b6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f005 f8dd 	bl	8006770 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	695a      	ldr	r2, [r3, #20]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80015c4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f002 fcdc 	bl	8003f88 <USB_ReadInterrupts>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015da:	f040 80b7 	bne.w	800174c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015ec:	f023 0301 	bic.w	r3, r3, #1
 80015f0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2110      	movs	r1, #16
 80015f8:	4618      	mov	r0, r3
 80015fa:	f001 fdaf 	bl	800315c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015fe:	2300      	movs	r3, #0
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001602:	e046      	b.n	8001692 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001606:	015a      	lsls	r2, r3, #5
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	4413      	add	r3, r2
 800160c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001610:	461a      	mov	r2, r3
 8001612:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001616:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161a:	015a      	lsls	r2, r3, #5
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	4413      	add	r3, r2
 8001620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001628:	0151      	lsls	r1, r2, #5
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	440a      	add	r2, r1
 800162e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001632:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001636:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163a:	015a      	lsls	r2, r3, #5
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	4413      	add	r3, r2
 8001640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001644:	461a      	mov	r2, r3
 8001646:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800164a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800164c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164e:	015a      	lsls	r2, r3, #5
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	4413      	add	r3, r2
 8001654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800165c:	0151      	lsls	r1, r2, #5
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	440a      	add	r2, r1
 8001662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001666:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800166a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800166c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166e:	015a      	lsls	r2, r3, #5
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	4413      	add	r3, r2
 8001674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800167c:	0151      	lsls	r1, r2, #5
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	440a      	add	r2, r1
 8001682:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001686:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800168a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800168c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168e:	3301      	adds	r3, #1
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	791b      	ldrb	r3, [r3, #4]
 8001696:	461a      	mov	r2, r3
 8001698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169a:	4293      	cmp	r3, r2
 800169c:	d3b2      	bcc.n	8001604 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80016b0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	7bdb      	ldrb	r3, [r3, #15]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d016      	beq.n	80016e8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016c4:	69fa      	ldr	r2, [r7, #28]
 80016c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ca:	f043 030b 	orr.w	r3, r3, #11
 80016ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	69fa      	ldr	r2, [r7, #28]
 80016dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016e0:	f043 030b 	orr.w	r3, r3, #11
 80016e4:	6453      	str	r3, [r2, #68]	; 0x44
 80016e6:	e015      	b.n	8001714 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016fa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80016fe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	69fa      	ldr	r2, [r7, #28]
 800170a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800170e:	f043 030b 	orr.w	r3, r3, #11
 8001712:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	69fa      	ldr	r2, [r7, #28]
 800171e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001722:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001726:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6818      	ldr	r0, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001736:	461a      	mov	r2, r3
 8001738:	f002 fcea 	bl	8004110 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	695a      	ldr	r2, [r3, #20]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800174a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f002 fc19 	bl	8003f88 <USB_ReadInterrupts>
 8001756:	4603      	mov	r3, r0
 8001758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800175c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001760:	d123      	bne.n	80017aa <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f002 fcaf 	bl	80040ca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f001 fd6c 	bl	800324e <USB_GetDevSpeed>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681c      	ldr	r4, [r3, #0]
 8001782:	f001 fa07 	bl	8002b94 <HAL_RCC_GetHCLKFreq>
 8001786:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800178c:	461a      	mov	r2, r3
 800178e:	4620      	mov	r0, r4
 8001790:	f001 fa70 	bl	8002c74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f004 ffc2 	bl	800671e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80017a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 fbea 	bl	8003f88 <USB_ReadInterrupts>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d10a      	bne.n	80017d4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f004 ff9f 	bl	8006702 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	695a      	ldr	r2, [r3, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f002 0208 	and.w	r2, r2, #8
 80017d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 fbd5 	bl	8003f88 <USB_ReadInterrupts>
 80017de:	4603      	mov	r3, r0
 80017e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e4:	2b80      	cmp	r3, #128	; 0x80
 80017e6:	d123      	bne.n	8001830 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017f0:	6a3b      	ldr	r3, [r7, #32]
 80017f2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017f4:	2301      	movs	r3, #1
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
 80017f8:	e014      	b.n	8001824 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017fe:	4613      	mov	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	4413      	add	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	440b      	add	r3, r1
 8001808:	f203 2357 	addw	r3, r3, #599	; 0x257
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d105      	bne.n	800181e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	b2db      	uxtb	r3, r3
 8001816:	4619      	mov	r1, r3
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 fb08 	bl	8001e2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	3301      	adds	r3, #1
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	791b      	ldrb	r3, [r3, #4]
 8001828:	461a      	mov	r2, r3
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	4293      	cmp	r3, r2
 800182e:	d3e4      	bcc.n	80017fa <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f002 fba7 	bl	8003f88 <USB_ReadInterrupts>
 800183a:	4603      	mov	r3, r0
 800183c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001840:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001844:	d13c      	bne.n	80018c0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001846:	2301      	movs	r3, #1
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
 800184a:	e02b      	b.n	80018a4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	015a      	lsls	r2, r3, #5
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	4413      	add	r3, r2
 8001854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001860:	4613      	mov	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4413      	add	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	3318      	adds	r3, #24
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d115      	bne.n	800189e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001872:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001874:	2b00      	cmp	r3, #0
 8001876:	da12      	bge.n	800189e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187c:	4613      	mov	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4413      	add	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	3317      	adds	r3, #23
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	b2db      	uxtb	r3, r3
 8001890:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001894:	b2db      	uxtb	r3, r3
 8001896:	4619      	mov	r1, r3
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 fac8 	bl	8001e2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	3301      	adds	r3, #1
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	791b      	ldrb	r3, [r3, #4]
 80018a8:	461a      	mov	r2, r3
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d3cd      	bcc.n	800184c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80018be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f002 fb5f 	bl	8003f88 <USB_ReadInterrupts>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018d4:	d156      	bne.n	8001984 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018d6:	2301      	movs	r3, #1
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
 80018da:	e045      	b.n	8001968 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	015a      	lsls	r2, r3, #5
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	4413      	add	r3, r2
 80018e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f0:	4613      	mov	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	4413      	add	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d12e      	bne.n	8001962 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001904:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001906:	2b00      	cmp	r3, #0
 8001908:	da2b      	bge.n	8001962 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8001916:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800191a:	429a      	cmp	r2, r3
 800191c:	d121      	bne.n	8001962 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001922:	4613      	mov	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	4413      	add	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	440b      	add	r3, r1
 800192c:	f203 2357 	addw	r3, r3, #599	; 0x257
 8001930:	2201      	movs	r2, #1
 8001932:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800193c:	6a3b      	ldr	r3, [r7, #32]
 800193e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10a      	bne.n	8001962 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	69fa      	ldr	r2, [r7, #28]
 8001956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800195a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195e:	6053      	str	r3, [r2, #4]
            break;
 8001960:	e008      	b.n	8001974 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	3301      	adds	r3, #1
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	791b      	ldrb	r3, [r3, #4]
 800196c:	461a      	mov	r2, r3
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	4293      	cmp	r3, r2
 8001972:	d3b3      	bcc.n	80018dc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695a      	ldr	r2, [r3, #20]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001982:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f002 fafd 	bl	8003f88 <USB_ReadInterrupts>
 800198e:	4603      	mov	r3, r0
 8001990:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001998:	d10a      	bne.n	80019b0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f004 ff40 	bl	8006820 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	695a      	ldr	r2, [r3, #20]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80019ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f002 fae7 	bl	8003f88 <USB_ReadInterrupts>
 80019ba:	4603      	mov	r3, r0
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d115      	bne.n	80019f0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f004 ff30 	bl	800683c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6859      	ldr	r1, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	e000      	b.n	80019f0 <HAL_PCD_IRQHandler+0x93c>
      return;
 80019ee:	bf00      	nop
    }
  }
}
 80019f0:	3734      	adds	r7, #52	; 0x34
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd90      	pop	{r4, r7, pc}

080019f6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	460b      	mov	r3, r1
 8001a00:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <HAL_PCD_SetAddress+0x1a>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e012      	b.n	8001a36 <HAL_PCD_SetAddress+0x40>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	78fa      	ldrb	r2, [r7, #3]
 8001a1c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	78fa      	ldrb	r2, [r7, #3]
 8001a24:	4611      	mov	r1, r2
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 fa46 	bl	8003eb8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	4608      	mov	r0, r1
 8001a48:	4611      	mov	r1, r2
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	70fb      	strb	r3, [r7, #3]
 8001a50:	460b      	mov	r3, r1
 8001a52:	803b      	strh	r3, [r7, #0]
 8001a54:	4613      	mov	r3, r2
 8001a56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	da0f      	bge.n	8001a84 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	f003 020f 	and.w	r2, r3, #15
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4413      	add	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	3310      	adds	r3, #16
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	3304      	adds	r3, #4
 8001a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	705a      	strb	r2, [r3, #1]
 8001a82:	e00f      	b.n	8001aa4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a84:	78fb      	ldrb	r3, [r7, #3]
 8001a86:	f003 020f 	and.w	r2, r3, #15
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001aa4:	78fb      	ldrb	r3, [r7, #3]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ab0:	883a      	ldrh	r2, [r7, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	78ba      	ldrb	r2, [r7, #2]
 8001aba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	785b      	ldrb	r3, [r3, #1]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d004      	beq.n	8001ace <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ace:	78bb      	ldrb	r3, [r7, #2]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d102      	bne.n	8001ada <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_PCD_EP_Open+0xaa>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e00e      	b.n	8001b06 <HAL_PCD_EP_Open+0xc8>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68f9      	ldr	r1, [r7, #12]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f001 fbce 	bl	8003298 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8001b04:	7afb      	ldrb	r3, [r7, #11]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	460b      	mov	r3, r1
 8001b18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	da0f      	bge.n	8001b42 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	f003 020f 	and.w	r2, r3, #15
 8001b28:	4613      	mov	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	3310      	adds	r3, #16
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	3304      	adds	r3, #4
 8001b38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	705a      	strb	r2, [r3, #1]
 8001b40:	e00f      	b.n	8001b62 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	f003 020f 	and.w	r2, r3, #15
 8001b48:	4613      	mov	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	3304      	adds	r3, #4
 8001b5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b62:	78fb      	ldrb	r3, [r7, #3]
 8001b64:	f003 030f 	and.w	r3, r3, #15
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_PCD_EP_Close+0x6e>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e00e      	b.n	8001b9a <HAL_PCD_EP_Close+0x8c>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68f9      	ldr	r1, [r7, #12]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f001 fc0c 	bl	80033a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b086      	sub	sp, #24
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	60f8      	str	r0, [r7, #12]
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	603b      	str	r3, [r7, #0]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bb2:	7afb      	ldrb	r3, [r7, #11]
 8001bb4:	f003 020f 	and.w	r2, r3, #15
 8001bb8:	4613      	mov	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3304      	adds	r3, #4
 8001bca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	2200      	movs	r2, #0
 8001be2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001be4:	7afb      	ldrb	r3, [r7, #11]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	799b      	ldrb	r3, [r3, #6]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d102      	bne.n	8001bfe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	799b      	ldrb	r3, [r3, #6]
 8001c06:	461a      	mov	r2, r3
 8001c08:	6979      	ldr	r1, [r7, #20]
 8001c0a:	f001 fca9 	bl	8003560 <USB_EPStartXfer>

  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	f003 020f 	and.w	r2, r3, #15
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	460b      	mov	r3, r1
 8001c56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c58:	7afb      	ldrb	r3, [r7, #11]
 8001c5a:	f003 020f 	and.w	r2, r3, #15
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4413      	add	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	3310      	adds	r3, #16
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2201      	movs	r2, #1
 8001c86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c88:	7afb      	ldrb	r3, [r7, #11]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	799b      	ldrb	r3, [r3, #6]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d102      	bne.n	8001ca2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	799b      	ldrb	r3, [r3, #6]
 8001caa:	461a      	mov	r2, r3
 8001cac:	6979      	ldr	r1, [r7, #20]
 8001cae:	f001 fc57 	bl	8003560 <USB_EPStartXfer>

  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	7912      	ldrb	r2, [r2, #4]
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d901      	bls.n	8001cda <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e04f      	b.n	8001d7a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	da0f      	bge.n	8001d02 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	f003 020f 	and.w	r2, r3, #15
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	3310      	adds	r3, #16
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	705a      	strb	r2, [r3, #1]
 8001d00:	e00d      	b.n	8001d1e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d02:	78fa      	ldrb	r2, [r7, #3]
 8001d04:	4613      	mov	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	3304      	adds	r3, #4
 8001d16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2201      	movs	r2, #1
 8001d22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d24:	78fb      	ldrb	r3, [r7, #3]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_PCD_EP_SetStall+0x82>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e01d      	b.n	8001d7a <HAL_PCD_EP_SetStall+0xbe>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68f9      	ldr	r1, [r7, #12]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f001 ffdf 	bl	8003d10 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d109      	bne.n	8001d70 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6818      	ldr	r0, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	7999      	ldrb	r1, [r3, #6]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	f002 f9d0 	bl	8004110 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d8e:	78fb      	ldrb	r3, [r7, #3]
 8001d90:	f003 030f 	and.w	r3, r3, #15
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	7912      	ldrb	r2, [r2, #4]
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d901      	bls.n	8001da0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e042      	b.n	8001e26 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001da0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	da0f      	bge.n	8001dc8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	f003 020f 	and.w	r2, r3, #15
 8001dae:	4613      	mov	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4413      	add	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	3310      	adds	r3, #16
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	4413      	add	r3, r2
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	705a      	strb	r2, [r3, #1]
 8001dc6:	e00f      	b.n	8001de8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	f003 020f 	and.w	r2, r3, #15
 8001dce:	4613      	mov	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	3304      	adds	r3, #4
 8001de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_PCD_EP_ClrStall+0x86>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e00e      	b.n	8001e26 <HAL_PCD_EP_ClrStall+0xa4>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68f9      	ldr	r1, [r7, #12]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f001 ffe8 	bl	8003dec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b084      	sub	sp, #16
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
 8001e36:	460b      	mov	r3, r1
 8001e38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001e3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	da0c      	bge.n	8001e5c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	f003 020f 	and.w	r2, r3, #15
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	3310      	adds	r3, #16
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	3304      	adds	r3, #4
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	e00c      	b.n	8001e76 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	f003 020f 	and.w	r2, r3, #15
 8001e62:	4613      	mov	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	3304      	adds	r3, #4
 8001e74:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68f9      	ldr	r1, [r7, #12]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f001 fe07 	bl	8003a90 <USB_EPStopXfer>
 8001e82:	4603      	mov	r3, r0
 8001e84:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001e86:	7afb      	ldrb	r3, [r7, #11]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	; 0x28
 8001e94:	af02      	add	r7, sp, #8
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4413      	add	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	3310      	adds	r3, #16
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d901      	bls.n	8001ec8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e06b      	b.n	8001fa0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	69fa      	ldr	r2, [r7, #28]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d902      	bls.n	8001ee4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	3303      	adds	r3, #3
 8001ee8:	089b      	lsrs	r3, r3, #2
 8001eea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001eec:	e02a      	b.n	8001f44 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	691a      	ldr	r2, [r3, #16]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d902      	bls.n	8001f0a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3303      	adds	r3, #3
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	68d9      	ldr	r1, [r3, #12]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	4603      	mov	r3, r0
 8001f26:	6978      	ldr	r0, [r7, #20]
 8001f28:	f001 fe5c 	bl	8003be4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	441a      	add	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	441a      	add	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	015a      	lsls	r2, r3, #5
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d809      	bhi.n	8001f6e <PCD_WriteEmptyTxFifo+0xde>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	695a      	ldr	r2, [r3, #20]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d203      	bcs.n	8001f6e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1bf      	bne.n	8001eee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	691a      	ldr	r2, [r3, #16]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d811      	bhi.n	8001f9e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	2201      	movs	r2, #1
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	6939      	ldr	r1, [r7, #16]
 8001f96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3720      	adds	r7, #32
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	333c      	adds	r3, #60	; 0x3c
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	799b      	ldrb	r3, [r3, #6]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d17b      	bne.n	80020d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d015      	beq.n	8002014 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	4a61      	ldr	r2, [pc, #388]	; (8002170 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	f240 80b9 	bls.w	8002164 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 80b3 	beq.w	8002164 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	4413      	add	r3, r2
 8002006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800200a:	461a      	mov	r2, r3
 800200c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002010:	6093      	str	r3, [r2, #8]
 8002012:	e0a7      	b.n	8002164 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	2b00      	cmp	r3, #0
 800201c:	d009      	beq.n	8002032 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	015a      	lsls	r2, r3, #5
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4413      	add	r3, r2
 8002026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800202a:	461a      	mov	r2, r3
 800202c:	2320      	movs	r3, #32
 800202e:	6093      	str	r3, [r2, #8]
 8002030:	e098      	b.n	8002164 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002038:	2b00      	cmp	r3, #0
 800203a:	f040 8093 	bne.w	8002164 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	4a4b      	ldr	r2, [pc, #300]	; (8002170 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d90f      	bls.n	8002066 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00a      	beq.n	8002066 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	4413      	add	r3, r2
 8002058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800205c:	461a      	mov	r2, r3
 800205e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002062:	6093      	str	r3, [r2, #8]
 8002064:	e07e      	b.n	8002164 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	3304      	adds	r3, #4
 800207a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6a1a      	ldr	r2, [r3, #32]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	0159      	lsls	r1, r3, #5
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	440b      	add	r3, r1
 8002088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002092:	1ad2      	subs	r2, r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d114      	bne.n	80020c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80020b0:	461a      	mov	r2, r3
 80020b2:	2101      	movs	r1, #1
 80020b4:	f002 f82c 	bl	8004110 <USB_EP0_OutStart>
 80020b8:	e006      	b.n	80020c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	441a      	add	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	4619      	mov	r1, r3
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f004 fae2 	bl	8006698 <HAL_PCD_DataOutStageCallback>
 80020d4:	e046      	b.n	8002164 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	4a26      	ldr	r2, [pc, #152]	; (8002174 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d124      	bne.n	8002128 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00a      	beq.n	80020fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	015a      	lsls	r2, r3, #5
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f4:	461a      	mov	r2, r3
 80020f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020fa:	6093      	str	r3, [r2, #8]
 80020fc:	e032      	b.n	8002164 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	f003 0320 	and.w	r3, r3, #32
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	4413      	add	r3, r2
 8002110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002114:	461a      	mov	r2, r3
 8002116:	2320      	movs	r3, #32
 8002118:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	4619      	mov	r1, r3
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f004 fab9 	bl	8006698 <HAL_PCD_DataOutStageCallback>
 8002126:	e01d      	b.n	8002164 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d114      	bne.n	8002158 <PCD_EP_OutXfrComplete_int+0x1b0>
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d108      	bne.n	8002158 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002150:	461a      	mov	r2, r3
 8002152:	2100      	movs	r1, #0
 8002154:	f001 ffdc 	bl	8004110 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	4619      	mov	r1, r3
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f004 fa9a 	bl	8006698 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3720      	adds	r7, #32
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	4f54300a 	.word	0x4f54300a
 8002174:	4f54310a 	.word	0x4f54310a

08002178 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	333c      	adds	r3, #60	; 0x3c
 8002190:	3304      	adds	r3, #4
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	015a      	lsls	r2, r3, #5
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4413      	add	r3, r2
 800219e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4a15      	ldr	r2, [pc, #84]	; (8002200 <PCD_EP_OutSetupPacket_int+0x88>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d90e      	bls.n	80021cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d009      	beq.n	80021cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	015a      	lsls	r2, r3, #5
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4413      	add	r3, r2
 80021c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c4:	461a      	mov	r2, r3
 80021c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f004 fa51 	bl	8006674 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <PCD_EP_OutSetupPacket_int+0x88>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d90c      	bls.n	80021f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	799b      	ldrb	r3, [r3, #6]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d108      	bne.n	80021f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80021ec:	461a      	mov	r2, r3
 80021ee:	2101      	movs	r1, #1
 80021f0:	f001 ff8e 	bl	8004110 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	4f54300a 	.word	0x4f54300a

08002204 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	70fb      	strb	r3, [r7, #3]
 8002210:	4613      	mov	r3, r2
 8002212:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d107      	bne.n	8002232 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002222:	883b      	ldrh	r3, [r7, #0]
 8002224:	0419      	lsls	r1, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	430a      	orrs	r2, r1
 800222e:	629a      	str	r2, [r3, #40]	; 0x28
 8002230:	e028      	b.n	8002284 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002238:	0c1b      	lsrs	r3, r3, #16
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	4413      	add	r3, r2
 800223e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002240:	2300      	movs	r3, #0
 8002242:	73fb      	strb	r3, [r7, #15]
 8002244:	e00d      	b.n	8002262 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	3340      	adds	r3, #64	; 0x40
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	0c1b      	lsrs	r3, r3, #16
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	4413      	add	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	3301      	adds	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	3b01      	subs	r3, #1
 8002268:	429a      	cmp	r2, r3
 800226a:	d3ec      	bcc.n	8002246 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800226c:	883b      	ldrh	r3, [r7, #0]
 800226e:	0418      	lsls	r0, r3, #16
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6819      	ldr	r1, [r3, #0]
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	3b01      	subs	r3, #1
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	4302      	orrs	r2, r0
 800227c:	3340      	adds	r3, #64	; 0x40
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	460b      	mov	r3, r1
 800229c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	887a      	ldrh	r2, [r7, #2]
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e267      	b.n	80027ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d075      	beq.n	80023d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ea:	4b88      	ldr	r3, [pc, #544]	; (800250c <HAL_RCC_OscConfig+0x240>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d00c      	beq.n	8002310 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f6:	4b85      	ldr	r3, [pc, #532]	; (800250c <HAL_RCC_OscConfig+0x240>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022fe:	2b08      	cmp	r3, #8
 8002300:	d112      	bne.n	8002328 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002302:	4b82      	ldr	r3, [pc, #520]	; (800250c <HAL_RCC_OscConfig+0x240>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800230e:	d10b      	bne.n	8002328 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002310:	4b7e      	ldr	r3, [pc, #504]	; (800250c <HAL_RCC_OscConfig+0x240>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d05b      	beq.n	80023d4 <HAL_RCC_OscConfig+0x108>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d157      	bne.n	80023d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e242      	b.n	80027ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002330:	d106      	bne.n	8002340 <HAL_RCC_OscConfig+0x74>
 8002332:	4b76      	ldr	r3, [pc, #472]	; (800250c <HAL_RCC_OscConfig+0x240>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a75      	ldr	r2, [pc, #468]	; (800250c <HAL_RCC_OscConfig+0x240>)
 8002338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	e01d      	b.n	800237c <HAL_RCC_OscConfig+0xb0>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002348:	d10c      	bne.n	8002364 <HAL_RCC_OscConfig+0x98>
 800234a:	4b70      	ldr	r3, [pc, #448]	; (800250c <HAL_RCC_OscConfig+0x240>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a6f      	ldr	r2, [pc, #444]	; (800250c <HAL_RCC_OscConfig+0x240>)
 8002350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	4b6d      	ldr	r3, [pc, #436]	; (800250c <HAL_RCC_OscConfig+0x240>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a6c      	ldr	r2, [pc, #432]	; (800250c <HAL_RCC_OscConfig+0x240>)
 800235c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e00b      	b.n	800237c <HAL_RCC_OscConfig+0xb0>
 8002364:	4b69      	ldr	r3, [pc, #420]	; (800250c <HAL_RCC_OscConfig+0x240>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a68      	ldr	r2, [pc, #416]	; (800250c <HAL_RCC_OscConfig+0x240>)
 800236a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	4b66      	ldr	r3, [pc, #408]	; (800250c <HAL_RCC_OscConfig+0x240>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a65      	ldr	r2, [pc, #404]	; (800250c <HAL_RCC_OscConfig+0x240>)
 8002376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800237a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d013      	beq.n	80023ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7fe fa64 	bl	8000850 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800238c:	f7fe fa60 	bl	8000850 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	; 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e207      	b.n	80027ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	4b5b      	ldr	r3, [pc, #364]	; (800250c <HAL_RCC_OscConfig+0x240>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0xc0>
 80023aa:	e014      	b.n	80023d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7fe fa50 	bl	8000850 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b4:	f7fe fa4c 	bl	8000850 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b64      	cmp	r3, #100	; 0x64
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e1f3      	b.n	80027ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c6:	4b51      	ldr	r3, [pc, #324]	; (800250c <HAL_RCC_OscConfig+0x240>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0xe8>
 80023d2:	e000      	b.n	80023d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d063      	beq.n	80024aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023e2:	4b4a      	ldr	r3, [pc, #296]	; (800250c <HAL_RCC_OscConfig+0x240>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00b      	beq.n	8002406 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ee:	4b47      	ldr	r3, [pc, #284]	; (800250c <HAL_RCC_OscConfig+0x240>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d11c      	bne.n	8002434 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023fa:	4b44      	ldr	r3, [pc, #272]	; (800250c <HAL_RCC_OscConfig+0x240>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d116      	bne.n	8002434 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002406:	4b41      	ldr	r3, [pc, #260]	; (800250c <HAL_RCC_OscConfig+0x240>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d005      	beq.n	800241e <HAL_RCC_OscConfig+0x152>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d001      	beq.n	800241e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e1c7      	b.n	80027ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241e:	4b3b      	ldr	r3, [pc, #236]	; (800250c <HAL_RCC_OscConfig+0x240>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4937      	ldr	r1, [pc, #220]	; (800250c <HAL_RCC_OscConfig+0x240>)
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002432:	e03a      	b.n	80024aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d020      	beq.n	800247e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800243c:	4b34      	ldr	r3, [pc, #208]	; (8002510 <HAL_RCC_OscConfig+0x244>)
 800243e:	2201      	movs	r2, #1
 8002440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002442:	f7fe fa05 	bl	8000850 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800244a:	f7fe fa01 	bl	8000850 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e1a8      	b.n	80027ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245c:	4b2b      	ldr	r3, [pc, #172]	; (800250c <HAL_RCC_OscConfig+0x240>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0f0      	beq.n	800244a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002468:	4b28      	ldr	r3, [pc, #160]	; (800250c <HAL_RCC_OscConfig+0x240>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4925      	ldr	r1, [pc, #148]	; (800250c <HAL_RCC_OscConfig+0x240>)
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]
 800247c:	e015      	b.n	80024aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800247e:	4b24      	ldr	r3, [pc, #144]	; (8002510 <HAL_RCC_OscConfig+0x244>)
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7fe f9e4 	bl	8000850 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800248c:	f7fe f9e0 	bl	8000850 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e187      	b.n	80027ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249e:	4b1b      	ldr	r3, [pc, #108]	; (800250c <HAL_RCC_OscConfig+0x240>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d036      	beq.n	8002524 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d016      	beq.n	80024ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <HAL_RCC_OscConfig+0x248>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c4:	f7fe f9c4 	bl	8000850 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024cc:	f7fe f9c0 	bl	8000850 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e167      	b.n	80027ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_RCC_OscConfig+0x240>)
 80024e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0x200>
 80024ea:	e01b      	b.n	8002524 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <HAL_RCC_OscConfig+0x248>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f2:	f7fe f9ad 	bl	8000850 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f8:	e00e      	b.n	8002518 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024fa:	f7fe f9a9 	bl	8000850 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d907      	bls.n	8002518 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e150      	b.n	80027ae <HAL_RCC_OscConfig+0x4e2>
 800250c:	40023800 	.word	0x40023800
 8002510:	42470000 	.word	0x42470000
 8002514:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002518:	4b88      	ldr	r3, [pc, #544]	; (800273c <HAL_RCC_OscConfig+0x470>)
 800251a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1ea      	bne.n	80024fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 8097 	beq.w	8002660 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002532:	2300      	movs	r3, #0
 8002534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002536:	4b81      	ldr	r3, [pc, #516]	; (800273c <HAL_RCC_OscConfig+0x470>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10f      	bne.n	8002562 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	4b7d      	ldr	r3, [pc, #500]	; (800273c <HAL_RCC_OscConfig+0x470>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	4a7c      	ldr	r2, [pc, #496]	; (800273c <HAL_RCC_OscConfig+0x470>)
 800254c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002550:	6413      	str	r3, [r2, #64]	; 0x40
 8002552:	4b7a      	ldr	r3, [pc, #488]	; (800273c <HAL_RCC_OscConfig+0x470>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255a:	60bb      	str	r3, [r7, #8]
 800255c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255e:	2301      	movs	r3, #1
 8002560:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002562:	4b77      	ldr	r3, [pc, #476]	; (8002740 <HAL_RCC_OscConfig+0x474>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d118      	bne.n	80025a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800256e:	4b74      	ldr	r3, [pc, #464]	; (8002740 <HAL_RCC_OscConfig+0x474>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a73      	ldr	r2, [pc, #460]	; (8002740 <HAL_RCC_OscConfig+0x474>)
 8002574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800257a:	f7fe f969 	bl	8000850 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002582:	f7fe f965 	bl	8000850 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e10c      	b.n	80027ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002594:	4b6a      	ldr	r3, [pc, #424]	; (8002740 <HAL_RCC_OscConfig+0x474>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0f0      	beq.n	8002582 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d106      	bne.n	80025b6 <HAL_RCC_OscConfig+0x2ea>
 80025a8:	4b64      	ldr	r3, [pc, #400]	; (800273c <HAL_RCC_OscConfig+0x470>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	4a63      	ldr	r2, [pc, #396]	; (800273c <HAL_RCC_OscConfig+0x470>)
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	6713      	str	r3, [r2, #112]	; 0x70
 80025b4:	e01c      	b.n	80025f0 <HAL_RCC_OscConfig+0x324>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b05      	cmp	r3, #5
 80025bc:	d10c      	bne.n	80025d8 <HAL_RCC_OscConfig+0x30c>
 80025be:	4b5f      	ldr	r3, [pc, #380]	; (800273c <HAL_RCC_OscConfig+0x470>)
 80025c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c2:	4a5e      	ldr	r2, [pc, #376]	; (800273c <HAL_RCC_OscConfig+0x470>)
 80025c4:	f043 0304 	orr.w	r3, r3, #4
 80025c8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ca:	4b5c      	ldr	r3, [pc, #368]	; (800273c <HAL_RCC_OscConfig+0x470>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ce:	4a5b      	ldr	r2, [pc, #364]	; (800273c <HAL_RCC_OscConfig+0x470>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6713      	str	r3, [r2, #112]	; 0x70
 80025d6:	e00b      	b.n	80025f0 <HAL_RCC_OscConfig+0x324>
 80025d8:	4b58      	ldr	r3, [pc, #352]	; (800273c <HAL_RCC_OscConfig+0x470>)
 80025da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025dc:	4a57      	ldr	r2, [pc, #348]	; (800273c <HAL_RCC_OscConfig+0x470>)
 80025de:	f023 0301 	bic.w	r3, r3, #1
 80025e2:	6713      	str	r3, [r2, #112]	; 0x70
 80025e4:	4b55      	ldr	r3, [pc, #340]	; (800273c <HAL_RCC_OscConfig+0x470>)
 80025e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e8:	4a54      	ldr	r2, [pc, #336]	; (800273c <HAL_RCC_OscConfig+0x470>)
 80025ea:	f023 0304 	bic.w	r3, r3, #4
 80025ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d015      	beq.n	8002624 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f8:	f7fe f92a 	bl	8000850 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fe:	e00a      	b.n	8002616 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002600:	f7fe f926 	bl	8000850 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f241 3288 	movw	r2, #5000	; 0x1388
 800260e:	4293      	cmp	r3, r2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e0cb      	b.n	80027ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002616:	4b49      	ldr	r3, [pc, #292]	; (800273c <HAL_RCC_OscConfig+0x470>)
 8002618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0ee      	beq.n	8002600 <HAL_RCC_OscConfig+0x334>
 8002622:	e014      	b.n	800264e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002624:	f7fe f914 	bl	8000850 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800262a:	e00a      	b.n	8002642 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800262c:	f7fe f910 	bl	8000850 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	f241 3288 	movw	r2, #5000	; 0x1388
 800263a:	4293      	cmp	r3, r2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e0b5      	b.n	80027ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002642:	4b3e      	ldr	r3, [pc, #248]	; (800273c <HAL_RCC_OscConfig+0x470>)
 8002644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1ee      	bne.n	800262c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800264e:	7dfb      	ldrb	r3, [r7, #23]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d105      	bne.n	8002660 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002654:	4b39      	ldr	r3, [pc, #228]	; (800273c <HAL_RCC_OscConfig+0x470>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	4a38      	ldr	r2, [pc, #224]	; (800273c <HAL_RCC_OscConfig+0x470>)
 800265a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800265e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 80a1 	beq.w	80027ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800266a:	4b34      	ldr	r3, [pc, #208]	; (800273c <HAL_RCC_OscConfig+0x470>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	2b08      	cmp	r3, #8
 8002674:	d05c      	beq.n	8002730 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d141      	bne.n	8002702 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267e:	4b31      	ldr	r3, [pc, #196]	; (8002744 <HAL_RCC_OscConfig+0x478>)
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7fe f8e4 	bl	8000850 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268c:	f7fe f8e0 	bl	8000850 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e087      	b.n	80027ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269e:	4b27      	ldr	r3, [pc, #156]	; (800273c <HAL_RCC_OscConfig+0x470>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69da      	ldr	r2, [r3, #28]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	019b      	lsls	r3, r3, #6
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c0:	085b      	lsrs	r3, r3, #1
 80026c2:	3b01      	subs	r3, #1
 80026c4:	041b      	lsls	r3, r3, #16
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	061b      	lsls	r3, r3, #24
 80026ce:	491b      	ldr	r1, [pc, #108]	; (800273c <HAL_RCC_OscConfig+0x470>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d4:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <HAL_RCC_OscConfig+0x478>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026da:	f7fe f8b9 	bl	8000850 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e2:	f7fe f8b5 	bl	8000850 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e05c      	b.n	80027ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <HAL_RCC_OscConfig+0x470>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x416>
 8002700:	e054      	b.n	80027ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002702:	4b10      	ldr	r3, [pc, #64]	; (8002744 <HAL_RCC_OscConfig+0x478>)
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7fe f8a2 	bl	8000850 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002710:	f7fe f89e 	bl	8000850 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e045      	b.n	80027ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_RCC_OscConfig+0x470>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x444>
 800272e:	e03d      	b.n	80027ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d107      	bne.n	8002748 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e038      	b.n	80027ae <HAL_RCC_OscConfig+0x4e2>
 800273c:	40023800 	.word	0x40023800
 8002740:	40007000 	.word	0x40007000
 8002744:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002748:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <HAL_RCC_OscConfig+0x4ec>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d028      	beq.n	80027a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002760:	429a      	cmp	r2, r3
 8002762:	d121      	bne.n	80027a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d11a      	bne.n	80027a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002778:	4013      	ands	r3, r2
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800277e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002780:	4293      	cmp	r3, r2
 8002782:	d111      	bne.n	80027a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	085b      	lsrs	r3, r3, #1
 8002790:	3b01      	subs	r3, #1
 8002792:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d107      	bne.n	80027a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e000      	b.n	80027ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40023800 	.word	0x40023800

080027bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0cc      	b.n	800296a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d0:	4b68      	ldr	r3, [pc, #416]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d90c      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b65      	ldr	r3, [pc, #404]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b63      	ldr	r3, [pc, #396]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0b8      	b.n	800296a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d020      	beq.n	8002846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002810:	4b59      	ldr	r3, [pc, #356]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a58      	ldr	r2, [pc, #352]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800281a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002828:	4b53      	ldr	r3, [pc, #332]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a52      	ldr	r2, [pc, #328]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b50      	ldr	r3, [pc, #320]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	494d      	ldr	r1, [pc, #308]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d044      	beq.n	80028dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	4b47      	ldr	r3, [pc, #284]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d119      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e07f      	b.n	800296a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d003      	beq.n	800287a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002876:	2b03      	cmp	r3, #3
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287a:	4b3f      	ldr	r3, [pc, #252]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e06f      	b.n	800296a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288a:	4b3b      	ldr	r3, [pc, #236]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e067      	b.n	800296a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289a:	4b37      	ldr	r3, [pc, #220]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f023 0203 	bic.w	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4934      	ldr	r1, [pc, #208]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028ac:	f7fd ffd0 	bl	8000850 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b4:	f7fd ffcc 	bl	8000850 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e04f      	b.n	800296a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	4b2b      	ldr	r3, [pc, #172]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 020c 	and.w	r2, r3, #12
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	429a      	cmp	r2, r3
 80028da:	d1eb      	bne.n	80028b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028dc:	4b25      	ldr	r3, [pc, #148]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d20c      	bcs.n	8002904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b22      	ldr	r3, [pc, #136]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b20      	ldr	r3, [pc, #128]	; (8002974 <HAL_RCC_ClockConfig+0x1b8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e032      	b.n	800296a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002910:	4b19      	ldr	r3, [pc, #100]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4916      	ldr	r1, [pc, #88]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d009      	beq.n	8002942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292e:	4b12      	ldr	r3, [pc, #72]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	490e      	ldr	r1, [pc, #56]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002942:	f000 f821 	bl	8002988 <HAL_RCC_GetSysClockFreq>
 8002946:	4602      	mov	r2, r0
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	490a      	ldr	r1, [pc, #40]	; (800297c <HAL_RCC_ClockConfig+0x1c0>)
 8002954:	5ccb      	ldrb	r3, [r1, r3]
 8002956:	fa22 f303 	lsr.w	r3, r2, r3
 800295a:	4a09      	ldr	r2, [pc, #36]	; (8002980 <HAL_RCC_ClockConfig+0x1c4>)
 800295c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800295e:	4b09      	ldr	r3, [pc, #36]	; (8002984 <HAL_RCC_ClockConfig+0x1c8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7fd ff30 	bl	80007c8 <HAL_InitTick>

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40023c00 	.word	0x40023c00
 8002978:	40023800 	.word	0x40023800
 800297c:	08006cbc 	.word	0x08006cbc
 8002980:	20000000 	.word	0x20000000
 8002984:	20000004 	.word	0x20000004

08002988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800298c:	b094      	sub	sp, #80	; 0x50
 800298e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	647b      	str	r3, [r7, #68]	; 0x44
 8002994:	2300      	movs	r3, #0
 8002996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002998:	2300      	movs	r3, #0
 800299a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029a0:	4b79      	ldr	r3, [pc, #484]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 030c 	and.w	r3, r3, #12
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d00d      	beq.n	80029c8 <HAL_RCC_GetSysClockFreq+0x40>
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	f200 80e1 	bhi.w	8002b74 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0x34>
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d003      	beq.n	80029c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80029ba:	e0db      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029bc:	4b73      	ldr	r3, [pc, #460]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x204>)
 80029be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80029c0:	e0db      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029c2:	4b73      	ldr	r3, [pc, #460]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x208>)
 80029c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029c6:	e0d8      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029c8:	4b6f      	ldr	r3, [pc, #444]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029d2:	4b6d      	ldr	r3, [pc, #436]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d063      	beq.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029de:	4b6a      	ldr	r3, [pc, #424]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	099b      	lsrs	r3, r3, #6
 80029e4:	2200      	movs	r2, #0
 80029e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80029e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029f0:	633b      	str	r3, [r7, #48]	; 0x30
 80029f2:	2300      	movs	r3, #0
 80029f4:	637b      	str	r3, [r7, #52]	; 0x34
 80029f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029fa:	4622      	mov	r2, r4
 80029fc:	462b      	mov	r3, r5
 80029fe:	f04f 0000 	mov.w	r0, #0
 8002a02:	f04f 0100 	mov.w	r1, #0
 8002a06:	0159      	lsls	r1, r3, #5
 8002a08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a0c:	0150      	lsls	r0, r2, #5
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4621      	mov	r1, r4
 8002a14:	1a51      	subs	r1, r2, r1
 8002a16:	6139      	str	r1, [r7, #16]
 8002a18:	4629      	mov	r1, r5
 8002a1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a2c:	4659      	mov	r1, fp
 8002a2e:	018b      	lsls	r3, r1, #6
 8002a30:	4651      	mov	r1, sl
 8002a32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a36:	4651      	mov	r1, sl
 8002a38:	018a      	lsls	r2, r1, #6
 8002a3a:	4651      	mov	r1, sl
 8002a3c:	ebb2 0801 	subs.w	r8, r2, r1
 8002a40:	4659      	mov	r1, fp
 8002a42:	eb63 0901 	sbc.w	r9, r3, r1
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a5a:	4690      	mov	r8, r2
 8002a5c:	4699      	mov	r9, r3
 8002a5e:	4623      	mov	r3, r4
 8002a60:	eb18 0303 	adds.w	r3, r8, r3
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	462b      	mov	r3, r5
 8002a68:	eb49 0303 	adc.w	r3, r9, r3
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a7a:	4629      	mov	r1, r5
 8002a7c:	024b      	lsls	r3, r1, #9
 8002a7e:	4621      	mov	r1, r4
 8002a80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a84:	4621      	mov	r1, r4
 8002a86:	024a      	lsls	r2, r1, #9
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a8e:	2200      	movs	r2, #0
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a98:	f7fd fba8 	bl	80001ec <__aeabi_uldivmod>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aa4:	e058      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa6:	4b38      	ldr	r3, [pc, #224]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	099b      	lsrs	r3, r3, #6
 8002aac:	2200      	movs	r2, #0
 8002aae:	4618      	mov	r0, r3
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ab6:	623b      	str	r3, [r7, #32]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
 8002abc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ac0:	4642      	mov	r2, r8
 8002ac2:	464b      	mov	r3, r9
 8002ac4:	f04f 0000 	mov.w	r0, #0
 8002ac8:	f04f 0100 	mov.w	r1, #0
 8002acc:	0159      	lsls	r1, r3, #5
 8002ace:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ad2:	0150      	lsls	r0, r2, #5
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4641      	mov	r1, r8
 8002ada:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ade:	4649      	mov	r1, r9
 8002ae0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	f04f 0300 	mov.w	r3, #0
 8002aec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002af0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002af4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002af8:	ebb2 040a 	subs.w	r4, r2, sl
 8002afc:	eb63 050b 	sbc.w	r5, r3, fp
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	00eb      	lsls	r3, r5, #3
 8002b0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b0e:	00e2      	lsls	r2, r4, #3
 8002b10:	4614      	mov	r4, r2
 8002b12:	461d      	mov	r5, r3
 8002b14:	4643      	mov	r3, r8
 8002b16:	18e3      	adds	r3, r4, r3
 8002b18:	603b      	str	r3, [r7, #0]
 8002b1a:	464b      	mov	r3, r9
 8002b1c:	eb45 0303 	adc.w	r3, r5, r3
 8002b20:	607b      	str	r3, [r7, #4]
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b2e:	4629      	mov	r1, r5
 8002b30:	028b      	lsls	r3, r1, #10
 8002b32:	4621      	mov	r1, r4
 8002b34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b38:	4621      	mov	r1, r4
 8002b3a:	028a      	lsls	r2, r1, #10
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4619      	mov	r1, r3
 8002b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b42:	2200      	movs	r2, #0
 8002b44:	61bb      	str	r3, [r7, #24]
 8002b46:	61fa      	str	r2, [r7, #28]
 8002b48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b4c:	f7fd fb4e 	bl	80001ec <__aeabi_uldivmod>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4613      	mov	r3, r2
 8002b56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	0c1b      	lsrs	r3, r3, #16
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	3301      	adds	r3, #1
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b72:	e002      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x204>)
 8002b76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3750      	adds	r7, #80	; 0x50
 8002b80:	46bd      	mov	sp, r7
 8002b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b86:	bf00      	nop
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	00f42400 	.word	0x00f42400
 8002b90:	007a1200 	.word	0x007a1200

08002b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b98:	4b03      	ldr	r3, [pc, #12]	; (8002ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	20000000 	.word	0x20000000

08002bac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002bac:	b084      	sub	sp, #16
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	f107 001c 	add.w	r0, r7, #28
 8002bba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002bbe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d123      	bne.n	8002c0e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002bee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d105      	bne.n	8002c02 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f001 fae2 	bl	80041cc <USB_CoreReset>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	73fb      	strb	r3, [r7, #15]
 8002c0c:	e01b      	b.n	8002c46 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f001 fad6 	bl	80041cc <USB_CoreReset>
 8002c20:	4603      	mov	r3, r0
 8002c22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002c24:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d106      	bne.n	8002c3a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	639a      	str	r2, [r3, #56]	; 0x38
 8002c38:	e005      	b.n	8002c46 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002c46:	7fbb      	ldrb	r3, [r7, #30]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d10b      	bne.n	8002c64 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f043 0206 	orr.w	r2, r3, #6
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f043 0220 	orr.w	r2, r3, #32
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c70:	b004      	add	sp, #16
 8002c72:	4770      	bx	lr

08002c74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d165      	bne.n	8002d54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4a41      	ldr	r2, [pc, #260]	; (8002d90 <USB_SetTurnaroundTime+0x11c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d906      	bls.n	8002c9e <USB_SetTurnaroundTime+0x2a>
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4a40      	ldr	r2, [pc, #256]	; (8002d94 <USB_SetTurnaroundTime+0x120>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d202      	bcs.n	8002c9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002c98:	230f      	movs	r3, #15
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	e062      	b.n	8002d64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	4a3c      	ldr	r2, [pc, #240]	; (8002d94 <USB_SetTurnaroundTime+0x120>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d306      	bcc.n	8002cb4 <USB_SetTurnaroundTime+0x40>
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	4a3b      	ldr	r2, [pc, #236]	; (8002d98 <USB_SetTurnaroundTime+0x124>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d202      	bcs.n	8002cb4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002cae:	230e      	movs	r3, #14
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	e057      	b.n	8002d64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4a38      	ldr	r2, [pc, #224]	; (8002d98 <USB_SetTurnaroundTime+0x124>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d306      	bcc.n	8002cca <USB_SetTurnaroundTime+0x56>
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4a37      	ldr	r2, [pc, #220]	; (8002d9c <USB_SetTurnaroundTime+0x128>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d202      	bcs.n	8002cca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002cc4:	230d      	movs	r3, #13
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	e04c      	b.n	8002d64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4a33      	ldr	r2, [pc, #204]	; (8002d9c <USB_SetTurnaroundTime+0x128>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d306      	bcc.n	8002ce0 <USB_SetTurnaroundTime+0x6c>
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	4a32      	ldr	r2, [pc, #200]	; (8002da0 <USB_SetTurnaroundTime+0x12c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d802      	bhi.n	8002ce0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002cda:	230c      	movs	r3, #12
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	e041      	b.n	8002d64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4a2f      	ldr	r2, [pc, #188]	; (8002da0 <USB_SetTurnaroundTime+0x12c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d906      	bls.n	8002cf6 <USB_SetTurnaroundTime+0x82>
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4a2e      	ldr	r2, [pc, #184]	; (8002da4 <USB_SetTurnaroundTime+0x130>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d802      	bhi.n	8002cf6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002cf0:	230b      	movs	r3, #11
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	e036      	b.n	8002d64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4a2a      	ldr	r2, [pc, #168]	; (8002da4 <USB_SetTurnaroundTime+0x130>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d906      	bls.n	8002d0c <USB_SetTurnaroundTime+0x98>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	4a29      	ldr	r2, [pc, #164]	; (8002da8 <USB_SetTurnaroundTime+0x134>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d802      	bhi.n	8002d0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002d06:	230a      	movs	r3, #10
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	e02b      	b.n	8002d64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4a26      	ldr	r2, [pc, #152]	; (8002da8 <USB_SetTurnaroundTime+0x134>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d906      	bls.n	8002d22 <USB_SetTurnaroundTime+0xae>
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4a25      	ldr	r2, [pc, #148]	; (8002dac <USB_SetTurnaroundTime+0x138>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d202      	bcs.n	8002d22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002d1c:	2309      	movs	r3, #9
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	e020      	b.n	8002d64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	4a21      	ldr	r2, [pc, #132]	; (8002dac <USB_SetTurnaroundTime+0x138>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d306      	bcc.n	8002d38 <USB_SetTurnaroundTime+0xc4>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	4a20      	ldr	r2, [pc, #128]	; (8002db0 <USB_SetTurnaroundTime+0x13c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d802      	bhi.n	8002d38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002d32:	2308      	movs	r3, #8
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	e015      	b.n	8002d64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	4a1d      	ldr	r2, [pc, #116]	; (8002db0 <USB_SetTurnaroundTime+0x13c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d906      	bls.n	8002d4e <USB_SetTurnaroundTime+0xda>
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4a1c      	ldr	r2, [pc, #112]	; (8002db4 <USB_SetTurnaroundTime+0x140>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d202      	bcs.n	8002d4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002d48:	2307      	movs	r3, #7
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	e00a      	b.n	8002d64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002d4e:	2306      	movs	r3, #6
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	e007      	b.n	8002d64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d102      	bne.n	8002d60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002d5a:	2309      	movs	r3, #9
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	e001      	b.n	8002d64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002d60:	2309      	movs	r3, #9
 8002d62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	029b      	lsls	r3, r3, #10
 8002d78:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	371c      	adds	r7, #28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	00d8acbf 	.word	0x00d8acbf
 8002d94:	00e4e1c0 	.word	0x00e4e1c0
 8002d98:	00f42400 	.word	0x00f42400
 8002d9c:	01067380 	.word	0x01067380
 8002da0:	011a499f 	.word	0x011a499f
 8002da4:	01312cff 	.word	0x01312cff
 8002da8:	014ca43f 	.word	0x014ca43f
 8002dac:	016e3600 	.word	0x016e3600
 8002db0:	01a6ab1f 	.word	0x01a6ab1f
 8002db4:	01e84800 	.word	0x01e84800

08002db8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f043 0201 	orr.w	r2, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f023 0201 	bic.w	r2, r3, #1
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d115      	bne.n	8002e4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002e2a:	200a      	movs	r0, #10
 8002e2c:	f7fd fd1c 	bl	8000868 <HAL_Delay>
      ms += 10U;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	330a      	adds	r3, #10
 8002e34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f001 f939 	bl	80040ae <USB_GetMode>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d01e      	beq.n	8002e80 <USB_SetCurrentMode+0x84>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2bc7      	cmp	r3, #199	; 0xc7
 8002e46:	d9f0      	bls.n	8002e2a <USB_SetCurrentMode+0x2e>
 8002e48:	e01a      	b.n	8002e80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d115      	bne.n	8002e7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002e5c:	200a      	movs	r0, #10
 8002e5e:	f7fd fd03 	bl	8000868 <HAL_Delay>
      ms += 10U;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	330a      	adds	r3, #10
 8002e66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f001 f920 	bl	80040ae <USB_GetMode>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d005      	beq.n	8002e80 <USB_SetCurrentMode+0x84>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2bc7      	cmp	r3, #199	; 0xc7
 8002e78:	d9f0      	bls.n	8002e5c <USB_SetCurrentMode+0x60>
 8002e7a:	e001      	b.n	8002e80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e005      	b.n	8002e8c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2bc8      	cmp	r3, #200	; 0xc8
 8002e84:	d101      	bne.n	8002e8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e94:	b084      	sub	sp, #16
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b086      	sub	sp, #24
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002ea2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	e009      	b.n	8002ec8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	3340      	adds	r3, #64	; 0x40
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	2b0e      	cmp	r3, #14
 8002ecc:	d9f2      	bls.n	8002eb4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002ece:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d11c      	bne.n	8002f10 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ee4:	f043 0302 	orr.w	r3, r3, #2
 8002ee8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	639a      	str	r2, [r3, #56]	; 0x38
 8002f0e:	e00b      	b.n	8002f28 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f20:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002f2e:	461a      	mov	r2, r3
 8002f30:	2300      	movs	r3, #0
 8002f32:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f34:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d10d      	bne.n	8002f58 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d104      	bne.n	8002f4e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002f44:	2100      	movs	r1, #0
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f968 	bl	800321c <USB_SetDevSpeed>
 8002f4c:	e008      	b.n	8002f60 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f4e:	2101      	movs	r1, #1
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f963 	bl	800321c <USB_SetDevSpeed>
 8002f56:	e003      	b.n	8002f60 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f58:	2103      	movs	r1, #3
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f95e 	bl	800321c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f60:	2110      	movs	r1, #16
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f8fa 	bl	800315c <USB_FlushTxFifo>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f924 	bl	80031c0 <USB_FlushRxFifo>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f94:	461a      	mov	r2, r3
 8002f96:	2300      	movs	r3, #0
 8002f98:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	e043      	b.n	8003034 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fc2:	d118      	bne.n	8002ff6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10a      	bne.n	8002fe0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	e013      	b.n	8003008 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fec:	461a      	mov	r2, r3
 8002fee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	e008      	b.n	8003008 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	015a      	lsls	r2, r3, #5
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003002:	461a      	mov	r2, r3
 8003004:	2300      	movs	r3, #0
 8003006:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	015a      	lsls	r2, r3, #5
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4413      	add	r3, r2
 8003010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003014:	461a      	mov	r2, r3
 8003016:	2300      	movs	r3, #0
 8003018:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4413      	add	r3, r2
 8003022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003026:	461a      	mov	r2, r3
 8003028:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800302c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	3301      	adds	r3, #1
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003038:	461a      	mov	r2, r3
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4293      	cmp	r3, r2
 800303e:	d3b5      	bcc.n	8002fac <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003040:	2300      	movs	r3, #0
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	e043      	b.n	80030ce <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4413      	add	r3, r2
 800304e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003058:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800305c:	d118      	bne.n	8003090 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10a      	bne.n	800307a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4413      	add	r3, r2
 800306c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003070:	461a      	mov	r2, r3
 8003072:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	e013      	b.n	80030a2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4413      	add	r3, r2
 8003082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003086:	461a      	mov	r2, r3
 8003088:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	e008      	b.n	80030a2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800309c:	461a      	mov	r2, r3
 800309e:	2300      	movs	r3, #0
 80030a0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ae:	461a      	mov	r2, r3
 80030b0:	2300      	movs	r3, #0
 80030b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c0:	461a      	mov	r2, r3
 80030c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	3301      	adds	r3, #1
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030d2:	461a      	mov	r2, r3
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d3b5      	bcc.n	8003046 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030ec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80030fa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80030fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003100:	2b00      	cmp	r3, #0
 8003102:	d105      	bne.n	8003110 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	f043 0210 	orr.w	r2, r3, #16
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699a      	ldr	r2, [r3, #24]
 8003114:	4b10      	ldr	r3, [pc, #64]	; (8003158 <USB_DevInit+0x2c4>)
 8003116:	4313      	orrs	r3, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800311c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	f043 0208 	orr.w	r2, r3, #8
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003130:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003134:	2b01      	cmp	r3, #1
 8003136:	d107      	bne.n	8003148 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003140:	f043 0304 	orr.w	r3, r3, #4
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003148:	7dfb      	ldrb	r3, [r7, #23]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003154:	b004      	add	sp, #16
 8003156:	4770      	bx	lr
 8003158:	803c3800 	.word	0x803c3800

0800315c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	3301      	adds	r3, #1
 800316e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003176:	d901      	bls.n	800317c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e01b      	b.n	80031b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	daf2      	bge.n	800316a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	019b      	lsls	r3, r3, #6
 800318c:	f043 0220 	orr.w	r2, r3, #32
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	3301      	adds	r3, #1
 8003198:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80031a0:	d901      	bls.n	80031a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e006      	b.n	80031b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	d0f0      	beq.n	8003194 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3301      	adds	r3, #1
 80031d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80031d8:	d901      	bls.n	80031de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e018      	b.n	8003210 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	daf2      	bge.n	80031cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2210      	movs	r2, #16
 80031ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	3301      	adds	r3, #1
 80031f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80031fc:	d901      	bls.n	8003202 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e006      	b.n	8003210 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f003 0310 	and.w	r3, r3, #16
 800320a:	2b10      	cmp	r3, #16
 800320c:	d0f0      	beq.n	80031f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	68f9      	ldr	r1, [r7, #12]
 8003238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800323c:	4313      	orrs	r3, r2
 800323e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800324e:	b480      	push	{r7}
 8003250:	b087      	sub	sp, #28
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0306 	and.w	r3, r3, #6
 8003266:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d102      	bne.n	8003274 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800326e:	2300      	movs	r3, #0
 8003270:	75fb      	strb	r3, [r7, #23]
 8003272:	e00a      	b.n	800328a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d002      	beq.n	8003280 <USB_GetDevSpeed+0x32>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b06      	cmp	r3, #6
 800327e:	d102      	bne.n	8003286 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003280:	2302      	movs	r3, #2
 8003282:	75fb      	strb	r3, [r7, #23]
 8003284:	e001      	b.n	800328a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003286:	230f      	movs	r3, #15
 8003288:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800328a:	7dfb      	ldrb	r3, [r7, #23]
}
 800328c:	4618      	mov	r0, r3
 800328e:	371c      	adds	r7, #28
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	785b      	ldrb	r3, [r3, #1]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d13a      	bne.n	800332a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ba:	69da      	ldr	r2, [r3, #28]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	2101      	movs	r1, #1
 80032c6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	68f9      	ldr	r1, [r7, #12]
 80032ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	015a      	lsls	r2, r3, #5
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4413      	add	r3, r2
 80032de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d155      	bne.n	8003398 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	791b      	ldrb	r3, [r3, #4]
 8003306:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003308:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	059b      	lsls	r3, r3, #22
 800330e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003310:	4313      	orrs	r3, r2
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	0151      	lsls	r1, r2, #5
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	440a      	add	r2, r1
 800331a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800331e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	e036      	b.n	8003398 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003330:	69da      	ldr	r2, [r3, #28]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	2101      	movs	r1, #1
 800333c:	fa01 f303 	lsl.w	r3, r1, r3
 8003340:	041b      	lsls	r3, r3, #16
 8003342:	68f9      	ldr	r1, [r7, #12]
 8003344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003348:	4313      	orrs	r3, r2
 800334a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4413      	add	r3, r2
 8003354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d11a      	bne.n	8003398 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	791b      	ldrb	r3, [r3, #4]
 800337c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800337e:	430b      	orrs	r3, r1
 8003380:	4313      	orrs	r3, r2
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	0151      	lsls	r1, r2, #5
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	440a      	add	r2, r1
 800338a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800338e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003396:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	785b      	ldrb	r3, [r3, #1]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d161      	bne.n	8003488 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033da:	d11f      	bne.n	800341c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	0151      	lsls	r1, r2, #5
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	440a      	add	r2, r1
 80033f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4413      	add	r3, r2
 8003404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	0151      	lsls	r1, r2, #5
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	440a      	add	r2, r1
 8003412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003416:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800341a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	2101      	movs	r1, #1
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	b29b      	uxth	r3, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	68f9      	ldr	r1, [r7, #12]
 8003438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800343c:	4013      	ands	r3, r2
 800343e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003446:	69da      	ldr	r2, [r3, #28]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	2101      	movs	r1, #1
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	b29b      	uxth	r3, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	68f9      	ldr	r1, [r7, #12]
 800345c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003460:	4013      	ands	r3, r2
 8003462:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	015a      	lsls	r2, r3, #5
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4413      	add	r3, r2
 800346c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	0159      	lsls	r1, r3, #5
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	440b      	add	r3, r1
 800347a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800347e:	4619      	mov	r1, r3
 8003480:	4b35      	ldr	r3, [pc, #212]	; (8003558 <USB_DeactivateEndpoint+0x1b0>)
 8003482:	4013      	ands	r3, r2
 8003484:	600b      	str	r3, [r1, #0]
 8003486:	e060      	b.n	800354a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800349a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800349e:	d11f      	bne.n	80034e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	0151      	lsls	r1, r2, #5
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	440a      	add	r2, r1
 80034b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	0151      	lsls	r1, r2, #5
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	440a      	add	r2, r1
 80034d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	2101      	movs	r1, #1
 80034f2:	fa01 f303 	lsl.w	r3, r1, r3
 80034f6:	041b      	lsls	r3, r3, #16
 80034f8:	43db      	mvns	r3, r3
 80034fa:	68f9      	ldr	r1, [r7, #12]
 80034fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003500:	4013      	ands	r3, r2
 8003502:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800350a:	69da      	ldr	r2, [r3, #28]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	f003 030f 	and.w	r3, r3, #15
 8003514:	2101      	movs	r1, #1
 8003516:	fa01 f303 	lsl.w	r3, r1, r3
 800351a:	041b      	lsls	r3, r3, #16
 800351c:	43db      	mvns	r3, r3
 800351e:	68f9      	ldr	r1, [r7, #12]
 8003520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003524:	4013      	ands	r3, r2
 8003526:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	0159      	lsls	r1, r3, #5
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	440b      	add	r3, r1
 800353e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003542:	4619      	mov	r1, r3
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <USB_DeactivateEndpoint+0x1b4>)
 8003546:	4013      	ands	r3, r2
 8003548:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	ec337800 	.word	0xec337800
 800355c:	eff37800 	.word	0xeff37800

08003560 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	; 0x28
 8003564:	af02      	add	r7, sp, #8
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	4613      	mov	r3, r2
 800356c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	785b      	ldrb	r3, [r3, #1]
 800357c:	2b01      	cmp	r3, #1
 800357e:	f040 817a 	bne.w	8003876 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d132      	bne.n	80035f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	0151      	lsls	r1, r2, #5
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	440a      	add	r2, r1
 80035a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	0151      	lsls	r1, r2, #5
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	440a      	add	r2, r1
 80035c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	0151      	lsls	r1, r2, #5
 80035e0:	69fa      	ldr	r2, [r7, #28]
 80035e2:	440a      	add	r2, r1
 80035e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035e8:	0cdb      	lsrs	r3, r3, #19
 80035ea:	04db      	lsls	r3, r3, #19
 80035ec:	6113      	str	r3, [r2, #16]
 80035ee:	e092      	b.n	8003716 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	0151      	lsls	r1, r2, #5
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	440a      	add	r2, r1
 8003606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800360a:	0cdb      	lsrs	r3, r3, #19
 800360c:	04db      	lsls	r3, r3, #19
 800360e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	4413      	add	r3, r2
 8003618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	0151      	lsls	r1, r2, #5
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	440a      	add	r2, r1
 8003626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800362a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800362e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003632:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d11a      	bne.n	8003670 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	691a      	ldr	r2, [r3, #16]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	429a      	cmp	r2, r3
 8003644:	d903      	bls.n	800364e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	4413      	add	r3, r2
 8003656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	0151      	lsls	r1, r2, #5
 8003660:	69fa      	ldr	r2, [r7, #28]
 8003662:	440a      	add	r2, r1
 8003664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003668:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800366c:	6113      	str	r3, [r2, #16]
 800366e:	e01b      	b.n	80036a8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	4413      	add	r3, r2
 8003678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800367c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	6919      	ldr	r1, [r3, #16]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	440b      	add	r3, r1
 8003688:	1e59      	subs	r1, r3, #1
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003692:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003694:	4ba2      	ldr	r3, [pc, #648]	; (8003920 <USB_EPStartXfer+0x3c0>)
 8003696:	400b      	ands	r3, r1
 8003698:	69b9      	ldr	r1, [r7, #24]
 800369a:	0148      	lsls	r0, r1, #5
 800369c:	69f9      	ldr	r1, [r7, #28]
 800369e:	4401      	add	r1, r0
 80036a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80036a4:	4313      	orrs	r3, r2
 80036a6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036be:	69b9      	ldr	r1, [r7, #24]
 80036c0:	0148      	lsls	r0, r1, #5
 80036c2:	69f9      	ldr	r1, [r7, #28]
 80036c4:	4401      	add	r1, r0
 80036c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80036ca:	4313      	orrs	r3, r2
 80036cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	791b      	ldrb	r3, [r3, #4]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d11f      	bne.n	8003716 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	0151      	lsls	r1, r2, #5
 80036e8:	69fa      	ldr	r2, [r7, #28]
 80036ea:	440a      	add	r2, r1
 80036ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80036f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	0151      	lsls	r1, r2, #5
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	440a      	add	r2, r1
 800370c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003710:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003714:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d14b      	bne.n	80037b4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d009      	beq.n	8003738 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003730:	461a      	mov	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	791b      	ldrb	r3, [r3, #4]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d128      	bne.n	8003792 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d110      	bne.n	8003772 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	4413      	add	r3, r2
 8003758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	0151      	lsls	r1, r2, #5
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	440a      	add	r2, r1
 8003766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800376a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	e00f      	b.n	8003792 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	4413      	add	r3, r2
 800377a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	0151      	lsls	r1, r2, #5
 8003784:	69fa      	ldr	r2, [r7, #28]
 8003786:	440a      	add	r2, r1
 8003788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800378c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003790:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	4413      	add	r3, r2
 800379a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	0151      	lsls	r1, r2, #5
 80037a4:	69fa      	ldr	r2, [r7, #28]
 80037a6:	440a      	add	r2, r1
 80037a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	e165      	b.n	8003a80 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	0151      	lsls	r1, r2, #5
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	440a      	add	r2, r1
 80037ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80037d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	791b      	ldrb	r3, [r3, #4]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d015      	beq.n	8003808 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 814d 	beq.w	8003a80 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	2101      	movs	r1, #1
 80037f8:	fa01 f303 	lsl.w	r3, r1, r3
 80037fc:	69f9      	ldr	r1, [r7, #28]
 80037fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003802:	4313      	orrs	r3, r2
 8003804:	634b      	str	r3, [r1, #52]	; 0x34
 8003806:	e13b      	b.n	8003a80 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d110      	bne.n	800383a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	4413      	add	r3, r2
 8003820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	0151      	lsls	r1, r2, #5
 800382a:	69fa      	ldr	r2, [r7, #28]
 800382c:	440a      	add	r2, r1
 800382e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003832:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	e00f      	b.n	800385a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	4413      	add	r3, r2
 8003842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	0151      	lsls	r1, r2, #5
 800384c:	69fa      	ldr	r2, [r7, #28]
 800384e:	440a      	add	r2, r1
 8003850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003858:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	68d9      	ldr	r1, [r3, #12]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	781a      	ldrb	r2, [r3, #0]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	b298      	uxth	r0, r3
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	4603      	mov	r3, r0
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f9b8 	bl	8003be4 <USB_WritePacket>
 8003874:	e104      	b.n	8003a80 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	0151      	lsls	r1, r2, #5
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	440a      	add	r2, r1
 800388c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003890:	0cdb      	lsrs	r3, r3, #19
 8003892:	04db      	lsls	r3, r3, #19
 8003894:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	015a      	lsls	r2, r3, #5
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	4413      	add	r3, r2
 800389e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	0151      	lsls	r1, r2, #5
 80038a8:	69fa      	ldr	r2, [r7, #28]
 80038aa:	440a      	add	r2, r1
 80038ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038b8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d131      	bne.n	8003924 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ee:	69b9      	ldr	r1, [r7, #24]
 80038f0:	0148      	lsls	r0, r1, #5
 80038f2:	69f9      	ldr	r1, [r7, #28]
 80038f4:	4401      	add	r1, r0
 80038f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80038fa:	4313      	orrs	r3, r2
 80038fc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	4413      	add	r3, r2
 8003906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	0151      	lsls	r1, r2, #5
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	440a      	add	r2, r1
 8003914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003918:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800391c:	6113      	str	r3, [r2, #16]
 800391e:	e061      	b.n	80039e4 <USB_EPStartXfer+0x484>
 8003920:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d123      	bne.n	8003974 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003938:	691a      	ldr	r2, [r3, #16]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003942:	69b9      	ldr	r1, [r7, #24]
 8003944:	0148      	lsls	r0, r1, #5
 8003946:	69f9      	ldr	r1, [r7, #28]
 8003948:	4401      	add	r1, r0
 800394a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800394e:	4313      	orrs	r3, r2
 8003950:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	4413      	add	r3, r2
 800395a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	0151      	lsls	r1, r2, #5
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	440a      	add	r2, r1
 8003968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800396c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003970:	6113      	str	r3, [r2, #16]
 8003972:	e037      	b.n	80039e4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	4413      	add	r3, r2
 800397e:	1e5a      	subs	r2, r3, #1
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	fbb2 f3f3 	udiv	r3, r2, r3
 8003988:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	8afa      	ldrh	r2, [r7, #22]
 8003990:	fb03 f202 	mul.w	r2, r3, r2
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a4:	691a      	ldr	r2, [r3, #16]
 80039a6:	8afb      	ldrh	r3, [r7, #22]
 80039a8:	04d9      	lsls	r1, r3, #19
 80039aa:	4b38      	ldr	r3, [pc, #224]	; (8003a8c <USB_EPStartXfer+0x52c>)
 80039ac:	400b      	ands	r3, r1
 80039ae:	69b9      	ldr	r1, [r7, #24]
 80039b0:	0148      	lsls	r0, r1, #5
 80039b2:	69f9      	ldr	r1, [r7, #28]
 80039b4:	4401      	add	r1, r0
 80039b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039ba:	4313      	orrs	r3, r2
 80039bc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d4:	69b9      	ldr	r1, [r7, #24]
 80039d6:	0148      	lsls	r0, r1, #5
 80039d8:	69f9      	ldr	r1, [r7, #28]
 80039da:	4401      	add	r1, r0
 80039dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039e0:	4313      	orrs	r3, r2
 80039e2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80039e4:	79fb      	ldrb	r3, [r7, #7]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d10d      	bne.n	8003a06 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	68d9      	ldr	r1, [r3, #12]
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a02:	460a      	mov	r2, r1
 8003a04:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	791b      	ldrb	r3, [r3, #4]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d128      	bne.n	8003a60 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d110      	bne.n	8003a40 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	0151      	lsls	r1, r2, #5
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	440a      	add	r2, r1
 8003a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	e00f      	b.n	8003a60 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	0151      	lsls	r1, r2, #5
 8003a52:	69fa      	ldr	r2, [r7, #28]
 8003a54:	440a      	add	r2, r1
 8003a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a5e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	0151      	lsls	r1, r2, #5
 8003a72:	69fa      	ldr	r2, [r7, #28]
 8003a74:	440a      	add	r2, r1
 8003a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3720      	adds	r7, #32
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	1ff80000 	.word	0x1ff80000

08003a90 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	785b      	ldrb	r3, [r3, #1]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d14a      	bne.n	8003b44 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ac6:	f040 8086 	bne.w	8003bd6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	7812      	ldrb	r2, [r2, #0]
 8003ade:	0151      	lsls	r1, r2, #5
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	440a      	add	r2, r1
 8003ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ae8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003aec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	7812      	ldrb	r2, [r2, #0]
 8003b02:	0151      	lsls	r1, r2, #5
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	440a      	add	r2, r1
 8003b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	3301      	adds	r3, #1
 8003b16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d902      	bls.n	8003b28 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	75fb      	strb	r3, [r7, #23]
          break;
 8003b26:	e056      	b.n	8003bd6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b40:	d0e7      	beq.n	8003b12 <USB_EPStopXfer+0x82>
 8003b42:	e048      	b.n	8003bd6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b5c:	d13b      	bne.n	8003bd6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	7812      	ldrb	r2, [r2, #0]
 8003b72:	0151      	lsls	r1, r2, #5
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	440a      	add	r2, r1
 8003b78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b80:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	7812      	ldrb	r2, [r2, #0]
 8003b96:	0151      	lsls	r1, r2, #5
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	440a      	add	r2, r1
 8003b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ba0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ba4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f242 7210 	movw	r2, #10000	; 0x2710
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d902      	bls.n	8003bbc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	75fb      	strb	r3, [r7, #23]
          break;
 8003bba:	e00c      	b.n	8003bd6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bd4:	d0e7      	beq.n	8003ba6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	371c      	adds	r7, #28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b089      	sub	sp, #36	; 0x24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	4611      	mov	r1, r2
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	71fb      	strb	r3, [r7, #7]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003c02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d123      	bne.n	8003c52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003c0a:	88bb      	ldrh	r3, [r7, #4]
 8003c0c:	3303      	adds	r3, #3
 8003c0e:	089b      	lsrs	r3, r3, #2
 8003c10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003c12:	2300      	movs	r3, #0
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	e018      	b.n	8003c4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	031a      	lsls	r2, r3, #12
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c24:	461a      	mov	r2, r3
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	3301      	adds	r3, #1
 8003c36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	3301      	adds	r3, #1
 8003c42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	3301      	adds	r3, #1
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d3e2      	bcc.n	8003c18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3724      	adds	r7, #36	; 0x24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b08b      	sub	sp, #44	; 0x2c
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	089b      	lsrs	r3, r3, #2
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003c7e:	88fb      	ldrh	r3, [r7, #6]
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003c86:	2300      	movs	r3, #0
 8003c88:	623b      	str	r3, [r7, #32]
 8003c8a:	e014      	b.n	8003cb6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	601a      	str	r2, [r3, #0]
    pDest++;
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	3301      	adds	r3, #1
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	623b      	str	r3, [r7, #32]
 8003cb6:	6a3a      	ldr	r2, [r7, #32]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d3e6      	bcc.n	8003c8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003cbe:	8bfb      	ldrh	r3, [r7, #30]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d01e      	beq.n	8003d02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f107 0310 	add.w	r3, r7, #16
 8003cd4:	6812      	ldr	r2, [r2, #0]
 8003cd6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	701a      	strb	r2, [r3, #0]
      i++;
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	3301      	adds	r3, #1
 8003cee:	623b      	str	r3, [r7, #32]
      pDest++;
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003cf6:	8bfb      	ldrh	r3, [r7, #30]
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003cfc:	8bfb      	ldrh	r3, [r7, #30]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1ea      	bne.n	8003cd8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	372c      	adds	r7, #44	; 0x2c
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	785b      	ldrb	r3, [r3, #1]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d12c      	bne.n	8003d86 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	db12      	blt.n	8003d64 <USB_EPSetStall+0x54>
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00f      	beq.n	8003d64 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	0151      	lsls	r1, r2, #5
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	440a      	add	r2, r1
 8003d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d62:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	0151      	lsls	r1, r2, #5
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	440a      	add	r2, r1
 8003d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	e02b      	b.n	8003dde <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	015a      	lsls	r2, r3, #5
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	db12      	blt.n	8003dbe <USB_EPSetStall+0xae>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00f      	beq.n	8003dbe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	0151      	lsls	r1, r2, #5
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	440a      	add	r2, r1
 8003db4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003db8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003dbc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	0151      	lsls	r1, r2, #5
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	440a      	add	r2, r1
 8003dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ddc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	785b      	ldrb	r3, [r3, #1]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d128      	bne.n	8003e5a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	0151      	lsls	r1, r2, #5
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	440a      	add	r2, r1
 8003e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e26:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	791b      	ldrb	r3, [r3, #4]
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d003      	beq.n	8003e38 <USB_EPClearStall+0x4c>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	791b      	ldrb	r3, [r3, #4]
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d138      	bne.n	8003eaa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	0151      	lsls	r1, r2, #5
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	440a      	add	r2, r1
 8003e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e56:	6013      	str	r3, [r2, #0]
 8003e58:	e027      	b.n	8003eaa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	015a      	lsls	r2, r3, #5
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4413      	add	r3, r2
 8003e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	0151      	lsls	r1, r2, #5
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	440a      	add	r2, r1
 8003e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e78:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	791b      	ldrb	r3, [r3, #4]
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d003      	beq.n	8003e8a <USB_EPClearStall+0x9e>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	791b      	ldrb	r3, [r3, #4]
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d10f      	bne.n	8003eaa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	0151      	lsls	r1, r2, #5
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	440a      	add	r2, r1
 8003ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ed6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003eda:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003eec:	68f9      	ldr	r1, [r7, #12]
 8003eee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003f1e:	f023 0303 	bic.w	r3, r3, #3
 8003f22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f32:	f023 0302 	bic.w	r3, r3, #2
 8003f36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b085      	sub	sp, #20
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003f60:	f023 0303 	bic.w	r3, r3, #3
 8003f64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f74:	f043 0302 	orr.w	r3, r3, #2
 8003f78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b085      	sub	sp, #20
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	0c1b      	lsrs	r3, r3, #16
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b085      	sub	sp, #20
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	4013      	ands	r3, r2
 8004004:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	b29b      	uxth	r3, r3
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004016:	b480      	push	{r7}
 8004018:	b085      	sub	sp, #20
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	460b      	mov	r3, r1
 8004020:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004026:	78fb      	ldrb	r3, [r7, #3]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	4013      	ands	r3, r2
 8004042:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004044:	68bb      	ldr	r3, [r7, #8]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004052:	b480      	push	{r7}
 8004054:	b087      	sub	sp, #28
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	460b      	mov	r3, r1
 800405c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004074:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	fa22 f303 	lsr.w	r3, r2, r3
 8004082:	01db      	lsls	r3, r3, #7
 8004084:	b2db      	uxtb	r3, r3
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800408c:	78fb      	ldrb	r3, [r7, #3]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	4413      	add	r3, r2
 8004094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4013      	ands	r3, r2
 800409e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80040a0:	68bb      	ldr	r3, [r7, #8]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	371c      	adds	r7, #28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f003 0301 	and.w	r3, r3, #1
}
 80040be:	4618      	mov	r0, r3
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b085      	sub	sp, #20
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80040e8:	f023 0307 	bic.w	r3, r3, #7
 80040ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004100:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	460b      	mov	r3, r1
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	333c      	adds	r3, #60	; 0x3c
 8004126:	3304      	adds	r3, #4
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	4a26      	ldr	r2, [pc, #152]	; (80041c8 <USB_EP0_OutStart+0xb8>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d90a      	bls.n	800414a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004144:	d101      	bne.n	800414a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	e037      	b.n	80041ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004150:	461a      	mov	r2, r3
 8004152:	2300      	movs	r3, #0
 8004154:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004164:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004168:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004178:	f043 0318 	orr.w	r3, r3, #24
 800417c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800418c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004190:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004192:	7afb      	ldrb	r3, [r7, #11]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d10f      	bne.n	80041b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419e:	461a      	mov	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041b2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80041b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	4f54300a 	.word	0x4f54300a

080041cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3301      	adds	r3, #1
 80041dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80041e4:	d901      	bls.n	80041ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e01b      	b.n	8004222 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	daf2      	bge.n	80041d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f043 0201 	orr.w	r2, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3301      	adds	r3, #1
 8004206:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800420e:	d901      	bls.n	8004214 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e006      	b.n	8004222 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b01      	cmp	r3, #1
 800421e:	d0f0      	beq.n	8004202 <USB_CoreReset+0x36>

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
	...

08004230 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800423c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004240:	f002 fc94 	bl	8006b6c <USBD_static_malloc>
 8004244:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d109      	bne.n	8004260 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	32b0      	adds	r2, #176	; 0xb0
 8004256:	2100      	movs	r1, #0
 8004258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800425c:	2302      	movs	r3, #2
 800425e:	e0d4      	b.n	800440a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004260:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004264:	2100      	movs	r1, #0
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f002 fcc4 	bl	8006bf4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	32b0      	adds	r2, #176	; 0xb0
 8004276:	68f9      	ldr	r1, [r7, #12]
 8004278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	32b0      	adds	r2, #176	; 0xb0
 8004286:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	7c1b      	ldrb	r3, [r3, #16]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d138      	bne.n	800430a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004298:	4b5e      	ldr	r3, [pc, #376]	; (8004414 <USBD_CDC_Init+0x1e4>)
 800429a:	7819      	ldrb	r1, [r3, #0]
 800429c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042a0:	2202      	movs	r2, #2
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f002 fb3f 	bl	8006926 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80042a8:	4b5a      	ldr	r3, [pc, #360]	; (8004414 <USBD_CDC_Init+0x1e4>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	f003 020f 	and.w	r2, r3, #15
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	3324      	adds	r3, #36	; 0x24
 80042be:	2201      	movs	r2, #1
 80042c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80042c2:	4b55      	ldr	r3, [pc, #340]	; (8004418 <USBD_CDC_Init+0x1e8>)
 80042c4:	7819      	ldrb	r1, [r3, #0]
 80042c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042ca:	2202      	movs	r2, #2
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f002 fb2a 	bl	8006926 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80042d2:	4b51      	ldr	r3, [pc, #324]	; (8004418 <USBD_CDC_Init+0x1e8>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	f003 020f 	and.w	r2, r3, #15
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80042ea:	2201      	movs	r2, #1
 80042ec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80042ee:	4b4b      	ldr	r3, [pc, #300]	; (800441c <USBD_CDC_Init+0x1ec>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	f003 020f 	and.w	r2, r3, #15
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	3326      	adds	r3, #38	; 0x26
 8004304:	2210      	movs	r2, #16
 8004306:	801a      	strh	r2, [r3, #0]
 8004308:	e035      	b.n	8004376 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800430a:	4b42      	ldr	r3, [pc, #264]	; (8004414 <USBD_CDC_Init+0x1e4>)
 800430c:	7819      	ldrb	r1, [r3, #0]
 800430e:	2340      	movs	r3, #64	; 0x40
 8004310:	2202      	movs	r2, #2
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f002 fb07 	bl	8006926 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004318:	4b3e      	ldr	r3, [pc, #248]	; (8004414 <USBD_CDC_Init+0x1e4>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	f003 020f 	and.w	r2, r3, #15
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	3324      	adds	r3, #36	; 0x24
 800432e:	2201      	movs	r2, #1
 8004330:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004332:	4b39      	ldr	r3, [pc, #228]	; (8004418 <USBD_CDC_Init+0x1e8>)
 8004334:	7819      	ldrb	r1, [r3, #0]
 8004336:	2340      	movs	r3, #64	; 0x40
 8004338:	2202      	movs	r2, #2
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f002 faf3 	bl	8006926 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004340:	4b35      	ldr	r3, [pc, #212]	; (8004418 <USBD_CDC_Init+0x1e8>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	f003 020f 	and.w	r2, r3, #15
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	440b      	add	r3, r1
 8004354:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004358:	2201      	movs	r2, #1
 800435a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800435c:	4b2f      	ldr	r3, [pc, #188]	; (800441c <USBD_CDC_Init+0x1ec>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	f003 020f 	and.w	r2, r3, #15
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	3326      	adds	r3, #38	; 0x26
 8004372:	2210      	movs	r2, #16
 8004374:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004376:	4b29      	ldr	r3, [pc, #164]	; (800441c <USBD_CDC_Init+0x1ec>)
 8004378:	7819      	ldrb	r1, [r3, #0]
 800437a:	2308      	movs	r3, #8
 800437c:	2203      	movs	r2, #3
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f002 fad1 	bl	8006926 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004384:	4b25      	ldr	r3, [pc, #148]	; (800441c <USBD_CDC_Init+0x1ec>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	f003 020f 	and.w	r2, r3, #15
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	3324      	adds	r3, #36	; 0x24
 800439a:	2201      	movs	r2, #1
 800439c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	33b0      	adds	r3, #176	; 0xb0
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80043d4:	2302      	movs	r3, #2
 80043d6:	e018      	b.n	800440a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	7c1b      	ldrb	r3, [r3, #16]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10a      	bne.n	80043f6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80043e0:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <USBD_CDC_Init+0x1e8>)
 80043e2:	7819      	ldrb	r1, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80043ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f002 fb88 	bl	8006b04 <USBD_LL_PrepareReceive>
 80043f4:	e008      	b.n	8004408 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80043f6:	4b08      	ldr	r3, [pc, #32]	; (8004418 <USBD_CDC_Init+0x1e8>)
 80043f8:	7819      	ldrb	r1, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004400:	2340      	movs	r3, #64	; 0x40
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f002 fb7e 	bl	8006b04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20000093 	.word	0x20000093
 8004418:	20000094 	.word	0x20000094
 800441c:	20000095 	.word	0x20000095

08004420 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800442c:	4b3a      	ldr	r3, [pc, #232]	; (8004518 <USBD_CDC_DeInit+0xf8>)
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	4619      	mov	r1, r3
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f002 fa9d 	bl	8006972 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004438:	4b37      	ldr	r3, [pc, #220]	; (8004518 <USBD_CDC_DeInit+0xf8>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	f003 020f 	and.w	r2, r3, #15
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	3324      	adds	r3, #36	; 0x24
 800444e:	2200      	movs	r2, #0
 8004450:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004452:	4b32      	ldr	r3, [pc, #200]	; (800451c <USBD_CDC_DeInit+0xfc>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	4619      	mov	r1, r3
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f002 fa8a 	bl	8006972 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800445e:	4b2f      	ldr	r3, [pc, #188]	; (800451c <USBD_CDC_DeInit+0xfc>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	f003 020f 	and.w	r2, r3, #15
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004476:	2200      	movs	r2, #0
 8004478:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800447a:	4b29      	ldr	r3, [pc, #164]	; (8004520 <USBD_CDC_DeInit+0x100>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	4619      	mov	r1, r3
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f002 fa76 	bl	8006972 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004486:	4b26      	ldr	r3, [pc, #152]	; (8004520 <USBD_CDC_DeInit+0x100>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	f003 020f 	and.w	r2, r3, #15
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	4613      	mov	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	3324      	adds	r3, #36	; 0x24
 800449c:	2200      	movs	r2, #0
 800449e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80044a0:	4b1f      	ldr	r3, [pc, #124]	; (8004520 <USBD_CDC_DeInit+0x100>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	f003 020f 	and.w	r2, r3, #15
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	3326      	adds	r3, #38	; 0x26
 80044b6:	2200      	movs	r2, #0
 80044b8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	32b0      	adds	r2, #176	; 0xb0
 80044c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01f      	beq.n	800450c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	33b0      	adds	r3, #176	; 0xb0
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	32b0      	adds	r2, #176	; 0xb0
 80044ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f002 fb4a 	bl	8006b88 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	32b0      	adds	r2, #176	; 0xb0
 80044fe:	2100      	movs	r1, #0
 8004500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	20000093 	.word	0x20000093
 800451c:	20000094 	.word	0x20000094
 8004520:	20000095 	.word	0x20000095

08004524 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	32b0      	adds	r2, #176	; 0xb0
 8004538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800453c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004550:	2303      	movs	r3, #3
 8004552:	e0bf      	b.n	80046d4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800455c:	2b00      	cmp	r3, #0
 800455e:	d050      	beq.n	8004602 <USBD_CDC_Setup+0xde>
 8004560:	2b20      	cmp	r3, #32
 8004562:	f040 80af 	bne.w	80046c4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	88db      	ldrh	r3, [r3, #6]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d03a      	beq.n	80045e4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	b25b      	sxtb	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	da1b      	bge.n	80045b0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	33b0      	adds	r3, #176	; 0xb0
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800458e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	88d2      	ldrh	r2, [r2, #6]
 8004594:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	88db      	ldrh	r3, [r3, #6]
 800459a:	2b07      	cmp	r3, #7
 800459c:	bf28      	it	cs
 800459e:	2307      	movcs	r3, #7
 80045a0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	89fa      	ldrh	r2, [r7, #14]
 80045a6:	4619      	mov	r1, r3
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f001 fd89 	bl	80060c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80045ae:	e090      	b.n	80046d2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	785a      	ldrb	r2, [r3, #1]
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	88db      	ldrh	r3, [r3, #6]
 80045be:	2b3f      	cmp	r3, #63	; 0x3f
 80045c0:	d803      	bhi.n	80045ca <USBD_CDC_Setup+0xa6>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	88db      	ldrh	r3, [r3, #6]
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	e000      	b.n	80045cc <USBD_CDC_Setup+0xa8>
 80045ca:	2240      	movs	r2, #64	; 0x40
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80045d2:	6939      	ldr	r1, [r7, #16]
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80045da:	461a      	mov	r2, r3
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f001 fd9b 	bl	8006118 <USBD_CtlPrepareRx>
      break;
 80045e2:	e076      	b.n	80046d2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	33b0      	adds	r3, #176	; 0xb0
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	7850      	ldrb	r0, [r2, #1]
 80045fa:	2200      	movs	r2, #0
 80045fc:	6839      	ldr	r1, [r7, #0]
 80045fe:	4798      	blx	r3
      break;
 8004600:	e067      	b.n	80046d2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	785b      	ldrb	r3, [r3, #1]
 8004606:	2b0b      	cmp	r3, #11
 8004608:	d851      	bhi.n	80046ae <USBD_CDC_Setup+0x18a>
 800460a:	a201      	add	r2, pc, #4	; (adr r2, 8004610 <USBD_CDC_Setup+0xec>)
 800460c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004610:	08004641 	.word	0x08004641
 8004614:	080046bd 	.word	0x080046bd
 8004618:	080046af 	.word	0x080046af
 800461c:	080046af 	.word	0x080046af
 8004620:	080046af 	.word	0x080046af
 8004624:	080046af 	.word	0x080046af
 8004628:	080046af 	.word	0x080046af
 800462c:	080046af 	.word	0x080046af
 8004630:	080046af 	.word	0x080046af
 8004634:	080046af 	.word	0x080046af
 8004638:	0800466b 	.word	0x0800466b
 800463c:	08004695 	.word	0x08004695
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b03      	cmp	r3, #3
 800464a:	d107      	bne.n	800465c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800464c:	f107 030a 	add.w	r3, r7, #10
 8004650:	2202      	movs	r2, #2
 8004652:	4619      	mov	r1, r3
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f001 fd33 	bl	80060c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800465a:	e032      	b.n	80046c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800465c:	6839      	ldr	r1, [r7, #0]
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f001 fcbd 	bl	8005fde <USBD_CtlError>
            ret = USBD_FAIL;
 8004664:	2303      	movs	r3, #3
 8004666:	75fb      	strb	r3, [r7, #23]
          break;
 8004668:	e02b      	b.n	80046c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b03      	cmp	r3, #3
 8004674:	d107      	bne.n	8004686 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004676:	f107 030d 	add.w	r3, r7, #13
 800467a:	2201      	movs	r2, #1
 800467c:	4619      	mov	r1, r3
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f001 fd1e 	bl	80060c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004684:	e01d      	b.n	80046c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004686:	6839      	ldr	r1, [r7, #0]
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f001 fca8 	bl	8005fde <USBD_CtlError>
            ret = USBD_FAIL;
 800468e:	2303      	movs	r3, #3
 8004690:	75fb      	strb	r3, [r7, #23]
          break;
 8004692:	e016      	b.n	80046c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b03      	cmp	r3, #3
 800469e:	d00f      	beq.n	80046c0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80046a0:	6839      	ldr	r1, [r7, #0]
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f001 fc9b 	bl	8005fde <USBD_CtlError>
            ret = USBD_FAIL;
 80046a8:	2303      	movs	r3, #3
 80046aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80046ac:	e008      	b.n	80046c0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80046ae:	6839      	ldr	r1, [r7, #0]
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f001 fc94 	bl	8005fde <USBD_CtlError>
          ret = USBD_FAIL;
 80046b6:	2303      	movs	r3, #3
 80046b8:	75fb      	strb	r3, [r7, #23]
          break;
 80046ba:	e002      	b.n	80046c2 <USBD_CDC_Setup+0x19e>
          break;
 80046bc:	bf00      	nop
 80046be:	e008      	b.n	80046d2 <USBD_CDC_Setup+0x1ae>
          break;
 80046c0:	bf00      	nop
      }
      break;
 80046c2:	e006      	b.n	80046d2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80046c4:	6839      	ldr	r1, [r7, #0]
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f001 fc89 	bl	8005fde <USBD_CtlError>
      ret = USBD_FAIL;
 80046cc:	2303      	movs	r3, #3
 80046ce:	75fb      	strb	r3, [r7, #23]
      break;
 80046d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	460b      	mov	r3, r1
 80046e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80046ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	32b0      	adds	r2, #176	; 0xb0
 80046fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004702:	2303      	movs	r3, #3
 8004704:	e065      	b.n	80047d2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	32b0      	adds	r2, #176	; 0xb0
 8004710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004714:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004716:	78fb      	ldrb	r3, [r7, #3]
 8004718:	f003 020f 	and.w	r2, r3, #15
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	440b      	add	r3, r1
 8004728:	3318      	adds	r3, #24
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d02f      	beq.n	8004790 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	f003 020f 	and.w	r2, r3, #15
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	3318      	adds	r3, #24
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	78fb      	ldrb	r3, [r7, #3]
 8004748:	f003 010f 	and.w	r1, r3, #15
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	460b      	mov	r3, r1
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	440b      	add	r3, r1
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4403      	add	r3, r0
 8004758:	331c      	adds	r3, #28
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004760:	fb01 f303 	mul.w	r3, r1, r3
 8004764:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004766:	2b00      	cmp	r3, #0
 8004768:	d112      	bne.n	8004790 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800476a:	78fb      	ldrb	r3, [r7, #3]
 800476c:	f003 020f 	and.w	r2, r3, #15
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	4613      	mov	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	440b      	add	r3, r1
 800477c:	3318      	adds	r3, #24
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004782:	78f9      	ldrb	r1, [r7, #3]
 8004784:	2300      	movs	r3, #0
 8004786:	2200      	movs	r2, #0
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f002 f99a 	bl	8006ac2 <USBD_LL_Transmit>
 800478e:	e01f      	b.n	80047d0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2200      	movs	r2, #0
 8004794:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	33b0      	adds	r3, #176	; 0xb0
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d010      	beq.n	80047d0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	33b0      	adds	r3, #176	; 0xb0
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80047cc:	78fa      	ldrb	r2, [r7, #3]
 80047ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b084      	sub	sp, #16
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	460b      	mov	r3, r1
 80047e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	32b0      	adds	r2, #176	; 0xb0
 80047f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	32b0      	adds	r2, #176	; 0xb0
 8004800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004808:	2303      	movs	r3, #3
 800480a:	e01a      	b.n	8004842 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800480c:	78fb      	ldrb	r3, [r7, #3]
 800480e:	4619      	mov	r1, r3
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f002 f998 	bl	8006b46 <USBD_LL_GetRxDataSize>
 8004816:	4602      	mov	r2, r0
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	33b0      	adds	r3, #176	; 0xb0
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800483c:	4611      	mov	r1, r2
 800483e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b084      	sub	sp, #16
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	32b0      	adds	r2, #176	; 0xb0
 800485c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004860:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004868:	2303      	movs	r3, #3
 800486a:	e025      	b.n	80048b8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	33b0      	adds	r3, #176	; 0xb0
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01a      	beq.n	80048b6 <USBD_CDC_EP0_RxReady+0x6c>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004886:	2bff      	cmp	r3, #255	; 0xff
 8004888:	d015      	beq.n	80048b6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	33b0      	adds	r3, #176	; 0xb0
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80048a2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80048aa:	b292      	uxth	r2, r2
 80048ac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	22ff      	movs	r2, #255	; 0xff
 80048b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80048c8:	2182      	movs	r1, #130	; 0x82
 80048ca:	4818      	ldr	r0, [pc, #96]	; (800492c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80048cc:	f000 fd4f 	bl	800536e <USBD_GetEpDesc>
 80048d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80048d2:	2101      	movs	r1, #1
 80048d4:	4815      	ldr	r0, [pc, #84]	; (800492c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80048d6:	f000 fd4a 	bl	800536e <USBD_GetEpDesc>
 80048da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80048dc:	2181      	movs	r1, #129	; 0x81
 80048de:	4813      	ldr	r0, [pc, #76]	; (800492c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80048e0:	f000 fd45 	bl	800536e <USBD_GetEpDesc>
 80048e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2210      	movs	r2, #16
 80048f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d006      	beq.n	8004906 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004900:	711a      	strb	r2, [r3, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d006      	beq.n	800491a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004914:	711a      	strb	r2, [r3, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2243      	movs	r2, #67	; 0x43
 800491e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004920:	4b02      	ldr	r3, [pc, #8]	; (800492c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004922:	4618      	mov	r0, r3
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	20000050 	.word	0x20000050

08004930 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004938:	2182      	movs	r1, #130	; 0x82
 800493a:	4818      	ldr	r0, [pc, #96]	; (800499c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800493c:	f000 fd17 	bl	800536e <USBD_GetEpDesc>
 8004940:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004942:	2101      	movs	r1, #1
 8004944:	4815      	ldr	r0, [pc, #84]	; (800499c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004946:	f000 fd12 	bl	800536e <USBD_GetEpDesc>
 800494a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800494c:	2181      	movs	r1, #129	; 0x81
 800494e:	4813      	ldr	r0, [pc, #76]	; (800499c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004950:	f000 fd0d 	bl	800536e <USBD_GetEpDesc>
 8004954:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2210      	movs	r2, #16
 8004960:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d006      	beq.n	8004976 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	2200      	movs	r2, #0
 800496c:	711a      	strb	r2, [r3, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f042 0202 	orr.w	r2, r2, #2
 8004974:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d006      	beq.n	800498a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	711a      	strb	r2, [r3, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f042 0202 	orr.w	r2, r2, #2
 8004988:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2243      	movs	r2, #67	; 0x43
 800498e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004990:	4b02      	ldr	r3, [pc, #8]	; (800499c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004992:	4618      	mov	r0, r3
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000050 	.word	0x20000050

080049a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80049a8:	2182      	movs	r1, #130	; 0x82
 80049aa:	4818      	ldr	r0, [pc, #96]	; (8004a0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80049ac:	f000 fcdf 	bl	800536e <USBD_GetEpDesc>
 80049b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80049b2:	2101      	movs	r1, #1
 80049b4:	4815      	ldr	r0, [pc, #84]	; (8004a0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80049b6:	f000 fcda 	bl	800536e <USBD_GetEpDesc>
 80049ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80049bc:	2181      	movs	r1, #129	; 0x81
 80049be:	4813      	ldr	r0, [pc, #76]	; (8004a0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80049c0:	f000 fcd5 	bl	800536e <USBD_GetEpDesc>
 80049c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2210      	movs	r2, #16
 80049d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d006      	beq.n	80049e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2200      	movs	r2, #0
 80049dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049e0:	711a      	strb	r2, [r3, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d006      	beq.n	80049fa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049f4:	711a      	strb	r2, [r3, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2243      	movs	r2, #67	; 0x43
 80049fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004a00:	4b02      	ldr	r3, [pc, #8]	; (8004a0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20000050 	.word	0x20000050

08004a10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	220a      	movs	r2, #10
 8004a1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004a1e:	4b03      	ldr	r3, [pc, #12]	; (8004a2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	2000000c 	.word	0x2000000c

08004a30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e009      	b.n	8004a58 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	33b0      	adds	r3, #176	; 0xb0
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	32b0      	adds	r2, #176	; 0xb0
 8004a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a7e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e008      	b.n	8004a9c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	371c      	adds	r7, #28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	32b0      	adds	r2, #176	; 0xb0
 8004abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ac0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e004      	b.n	8004ad6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
	...

08004ae4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	32b0      	adds	r2, #176	; 0xb0
 8004af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004afa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8004afc:	2301      	movs	r3, #1
 8004afe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e025      	b.n	8004b56 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d11f      	bne.n	8004b54 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004b1c:	4b10      	ldr	r3, [pc, #64]	; (8004b60 <USBD_CDC_TransmitPacket+0x7c>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	f003 020f 	and.w	r2, r3, #15
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4403      	add	r3, r0
 8004b36:	3318      	adds	r3, #24
 8004b38:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004b3a:	4b09      	ldr	r3, [pc, #36]	; (8004b60 <USBD_CDC_TransmitPacket+0x7c>)
 8004b3c:	7819      	ldrb	r1, [r3, #0]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f001 ffb9 	bl	8006ac2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000093 	.word	0x20000093

08004b64 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	32b0      	adds	r2, #176	; 0xb0
 8004b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b7a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	32b0      	adds	r2, #176	; 0xb0
 8004b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e018      	b.n	8004bc4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	7c1b      	ldrb	r3, [r3, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10a      	bne.n	8004bb0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004b9a:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <USBD_CDC_ReceivePacket+0x68>)
 8004b9c:	7819      	ldrb	r1, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f001 ffab 	bl	8006b04 <USBD_LL_PrepareReceive>
 8004bae:	e008      	b.n	8004bc2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004bb0:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <USBD_CDC_ReceivePacket+0x68>)
 8004bb2:	7819      	ldrb	r1, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004bba:	2340      	movs	r3, #64	; 0x40
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f001 ffa1 	bl	8006b04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20000094 	.word	0x20000094

08004bd0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e01f      	b.n	8004c28 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	79fa      	ldrb	r2, [r7, #7]
 8004c1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f001 fe1b 	bl	8006858 <USBD_LL_Init>
 8004c22:	4603      	mov	r3, r0
 8004c24:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e025      	b.n	8004c94 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	32ae      	adds	r2, #174	; 0xae
 8004c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00f      	beq.n	8004c84 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	32ae      	adds	r2, #174	; 0xae
 8004c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	f107 020e 	add.w	r2, r7, #14
 8004c78:	4610      	mov	r0, r2
 8004c7a:	4798      	blx	r3
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004c8a:	1c5a      	adds	r2, r3, #1
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f001 fe23 	bl	80068f0 <USBD_LL_Start>
 8004caa:	4603      	mov	r3, r0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004cbc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b084      	sub	sp, #16
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d009      	beq.n	8004cf8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	78fa      	ldrb	r2, [r7, #3]
 8004cee:	4611      	mov	r1, r2
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	4798      	blx	r3
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	78fa      	ldrb	r2, [r7, #3]
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	4798      	blx	r3
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b084      	sub	sp, #16
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
 8004d3e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004d46:	6839      	ldr	r1, [r7, #0]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f001 f90e 	bl	8005f6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004d6a:	f003 031f 	and.w	r3, r3, #31
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d01a      	beq.n	8004da8 <USBD_LL_SetupStage+0x72>
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d822      	bhi.n	8004dbc <USBD_LL_SetupStage+0x86>
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <USBD_LL_SetupStage+0x4a>
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d00a      	beq.n	8004d94 <USBD_LL_SetupStage+0x5e>
 8004d7e:	e01d      	b.n	8004dbc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004d86:	4619      	mov	r1, r3
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 fb65 	bl	8005458 <USBD_StdDevReq>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	73fb      	strb	r3, [r7, #15]
      break;
 8004d92:	e020      	b.n	8004dd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 fbcd 	bl	800553c <USBD_StdItfReq>
 8004da2:	4603      	mov	r3, r0
 8004da4:	73fb      	strb	r3, [r7, #15]
      break;
 8004da6:	e016      	b.n	8004dd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004dae:	4619      	mov	r1, r3
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fc2f 	bl	8005614 <USBD_StdEPReq>
 8004db6:	4603      	mov	r3, r0
 8004db8:	73fb      	strb	r3, [r7, #15]
      break;
 8004dba:	e00c      	b.n	8004dd6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004dc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	4619      	mov	r1, r3
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f001 fdf0 	bl	80069b0 <USBD_LL_StallEP>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd4:	bf00      	nop
  }

  return ret;
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	460b      	mov	r3, r1
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004df2:	7afb      	ldrb	r3, [r7, #11]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d16e      	bne.n	8004ed6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004dfe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	f040 8098 	bne.w	8004f3c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d913      	bls.n	8004e40 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	1ad2      	subs	r2, r2, r3
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	bf28      	it	cs
 8004e32:	4613      	movcs	r3, r2
 8004e34:	461a      	mov	r2, r3
 8004e36:	6879      	ldr	r1, [r7, #4]
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f001 f98a 	bl	8006152 <USBD_CtlContinueRx>
 8004e3e:	e07d      	b.n	8004f3c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004e46:	f003 031f 	and.w	r3, r3, #31
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d014      	beq.n	8004e78 <USBD_LL_DataOutStage+0x98>
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d81d      	bhi.n	8004e8e <USBD_LL_DataOutStage+0xae>
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d002      	beq.n	8004e5c <USBD_LL_DataOutStage+0x7c>
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d003      	beq.n	8004e62 <USBD_LL_DataOutStage+0x82>
 8004e5a:	e018      	b.n	8004e8e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	75bb      	strb	r3, [r7, #22]
            break;
 8004e60:	e018      	b.n	8004e94 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 fa64 	bl	800533a <USBD_CoreFindIF>
 8004e72:	4603      	mov	r3, r0
 8004e74:	75bb      	strb	r3, [r7, #22]
            break;
 8004e76:	e00d      	b.n	8004e94 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	4619      	mov	r1, r3
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 fa66 	bl	8005354 <USBD_CoreFindEP>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	75bb      	strb	r3, [r7, #22]
            break;
 8004e8c:	e002      	b.n	8004e94 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	75bb      	strb	r3, [r7, #22]
            break;
 8004e92:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004e94:	7dbb      	ldrb	r3, [r7, #22]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d119      	bne.n	8004ece <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b03      	cmp	r3, #3
 8004ea4:	d113      	bne.n	8004ece <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004ea6:	7dba      	ldrb	r2, [r7, #22]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	32ae      	adds	r2, #174	; 0xae
 8004eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00b      	beq.n	8004ece <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004eb6:	7dba      	ldrb	r2, [r7, #22]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004ebe:	7dba      	ldrb	r2, [r7, #22]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	32ae      	adds	r2, #174	; 0xae
 8004ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f001 f950 	bl	8006174 <USBD_CtlSendStatus>
 8004ed4:	e032      	b.n	8004f3c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004ed6:	7afb      	ldrb	r3, [r7, #11]
 8004ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	4619      	mov	r1, r3
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 fa37 	bl	8005354 <USBD_CoreFindEP>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004eea:	7dbb      	ldrb	r3, [r7, #22]
 8004eec:	2bff      	cmp	r3, #255	; 0xff
 8004eee:	d025      	beq.n	8004f3c <USBD_LL_DataOutStage+0x15c>
 8004ef0:	7dbb      	ldrb	r3, [r7, #22]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d122      	bne.n	8004f3c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d117      	bne.n	8004f32 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004f02:	7dba      	ldrb	r2, [r7, #22]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	32ae      	adds	r2, #174	; 0xae
 8004f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00f      	beq.n	8004f32 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004f12:	7dba      	ldrb	r2, [r7, #22]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004f1a:	7dba      	ldrb	r2, [r7, #22]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	32ae      	adds	r2, #174	; 0xae
 8004f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	7afa      	ldrb	r2, [r7, #11]
 8004f28:	4611      	mov	r1, r2
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	4798      	blx	r3
 8004f2e:	4603      	mov	r3, r0
 8004f30:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004f32:	7dfb      	ldrb	r3, [r7, #23]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004f38:	7dfb      	ldrb	r3, [r7, #23]
 8004f3a:	e000      	b.n	8004f3e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b086      	sub	sp, #24
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	60f8      	str	r0, [r7, #12]
 8004f4e:	460b      	mov	r3, r1
 8004f50:	607a      	str	r2, [r7, #4]
 8004f52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004f54:	7afb      	ldrb	r3, [r7, #11]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d16f      	bne.n	800503a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	3314      	adds	r3, #20
 8004f5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d15a      	bne.n	8005020 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d914      	bls.n	8004fa0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	1ad2      	subs	r2, r2, r3
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	6879      	ldr	r1, [r7, #4]
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f001 f8b2 	bl	80060f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004f92:	2300      	movs	r3, #0
 8004f94:	2200      	movs	r2, #0
 8004f96:	2100      	movs	r1, #0
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f001 fdb3 	bl	8006b04 <USBD_LL_PrepareReceive>
 8004f9e:	e03f      	b.n	8005020 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d11c      	bne.n	8004fe6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d316      	bcc.n	8004fe6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d20f      	bcs.n	8004fe6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2100      	movs	r1, #0
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f001 f893 	bl	80060f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004fd8:	2300      	movs	r3, #0
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2100      	movs	r1, #0
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f001 fd90 	bl	8006b04 <USBD_LL_PrepareReceive>
 8004fe4:	e01c      	b.n	8005020 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d10f      	bne.n	8005012 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d009      	beq.n	8005012 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005012:	2180      	movs	r1, #128	; 0x80
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f001 fccb 	bl	80069b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f001 f8bd 	bl	800619a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d03a      	beq.n	80050a0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f7ff fe42 	bl	8004cb4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005038:	e032      	b.n	80050a0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800503a:	7afb      	ldrb	r3, [r7, #11]
 800503c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005040:	b2db      	uxtb	r3, r3
 8005042:	4619      	mov	r1, r3
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 f985 	bl	8005354 <USBD_CoreFindEP>
 800504a:	4603      	mov	r3, r0
 800504c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800504e:	7dfb      	ldrb	r3, [r7, #23]
 8005050:	2bff      	cmp	r3, #255	; 0xff
 8005052:	d025      	beq.n	80050a0 <USBD_LL_DataInStage+0x15a>
 8005054:	7dfb      	ldrb	r3, [r7, #23]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d122      	bne.n	80050a0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b03      	cmp	r3, #3
 8005064:	d11c      	bne.n	80050a0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005066:	7dfa      	ldrb	r2, [r7, #23]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	32ae      	adds	r2, #174	; 0xae
 800506c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d014      	beq.n	80050a0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005076:	7dfa      	ldrb	r2, [r7, #23]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800507e:	7dfa      	ldrb	r2, [r7, #23]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	32ae      	adds	r2, #174	; 0xae
 8005084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	7afa      	ldrb	r2, [r7, #11]
 800508c:	4611      	mov	r1, r2
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	4798      	blx	r3
 8005092:	4603      	mov	r3, r0
 8005094:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005096:	7dbb      	ldrb	r3, [r7, #22]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800509c:	7dbb      	ldrb	r3, [r7, #22]
 800509e:	e000      	b.n	80050a2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d014      	beq.n	8005110 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00e      	beq.n	8005110 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6852      	ldr	r2, [r2, #4]
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	4611      	mov	r1, r2
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	4798      	blx	r3
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800510c:	2303      	movs	r3, #3
 800510e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005110:	2340      	movs	r3, #64	; 0x40
 8005112:	2200      	movs	r2, #0
 8005114:	2100      	movs	r1, #0
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f001 fc05 	bl	8006926 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2240      	movs	r2, #64	; 0x40
 8005128:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800512c:	2340      	movs	r3, #64	; 0x40
 800512e:	2200      	movs	r2, #0
 8005130:	2180      	movs	r1, #128	; 0x80
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f001 fbf7 	bl	8006926 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2240      	movs	r2, #64	; 0x40
 8005142:	621a      	str	r2, [r3, #32]

  return ret;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800514e:	b480      	push	{r7}
 8005150:	b083      	sub	sp, #12
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	460b      	mov	r3, r1
 8005158:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	78fa      	ldrb	r2, [r7, #3]
 800515e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b04      	cmp	r3, #4
 8005180:	d006      	beq.n	8005190 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005188:	b2da      	uxtb	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2204      	movs	r2, #4
 8005194:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d106      	bne.n	80051c8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b082      	sub	sp, #8
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d110      	bne.n	800520c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00b      	beq.n	800520c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b082      	sub	sp, #8
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	460b      	mov	r3, r1
 8005220:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	32ae      	adds	r2, #174	; 0xae
 800522c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005234:	2303      	movs	r3, #3
 8005236:	e01c      	b.n	8005272 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b03      	cmp	r3, #3
 8005242:	d115      	bne.n	8005270 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	32ae      	adds	r2, #174	; 0xae
 800524e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00b      	beq.n	8005270 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	32ae      	adds	r2, #174	; 0xae
 8005262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	78fa      	ldrb	r2, [r7, #3]
 800526a:	4611      	mov	r1, r2
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
 8005282:	460b      	mov	r3, r1
 8005284:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	32ae      	adds	r2, #174	; 0xae
 8005290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005298:	2303      	movs	r3, #3
 800529a:	e01c      	b.n	80052d6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	d115      	bne.n	80052d4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	32ae      	adds	r2, #174	; 0xae
 80052b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00b      	beq.n	80052d4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	32ae      	adds	r2, #174	; 0xae
 80052c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	78fa      	ldrb	r2, [r7, #3]
 80052ce:	4611      	mov	r1, r2
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00e      	beq.n	8005330 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	6852      	ldr	r2, [r2, #4]
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	4611      	mov	r1, r2
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	4798      	blx	r3
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800532c:	2303      	movs	r3, #3
 800532e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005330:	7bfb      	ldrb	r3, [r7, #15]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	460b      	mov	r3, r1
 8005344:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005346:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005348:	4618      	mov	r0, r3
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005360:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005362:	4618      	mov	r0, r3
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b086      	sub	sp, #24
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	460b      	mov	r3, r1
 8005378:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005382:	2300      	movs	r3, #0
 8005384:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	885b      	ldrh	r3, [r3, #2]
 800538a:	b29a      	uxth	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	b29b      	uxth	r3, r3
 8005392:	429a      	cmp	r2, r3
 8005394:	d920      	bls.n	80053d8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	b29b      	uxth	r3, r3
 800539c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800539e:	e013      	b.n	80053c8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80053a0:	f107 030a 	add.w	r3, r7, #10
 80053a4:	4619      	mov	r1, r3
 80053a6:	6978      	ldr	r0, [r7, #20]
 80053a8:	f000 f81b 	bl	80053e2 <USBD_GetNextDesc>
 80053ac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	785b      	ldrb	r3, [r3, #1]
 80053b2:	2b05      	cmp	r3, #5
 80053b4:	d108      	bne.n	80053c8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	789b      	ldrb	r3, [r3, #2]
 80053be:	78fa      	ldrb	r2, [r7, #3]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d008      	beq.n	80053d6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80053c4:	2300      	movs	r3, #0
 80053c6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	885b      	ldrh	r3, [r3, #2]
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	897b      	ldrh	r3, [r7, #10]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d8e5      	bhi.n	80053a0 <USBD_GetEpDesc+0x32>
 80053d4:	e000      	b.n	80053d8 <USBD_GetEpDesc+0x6a>
          break;
 80053d6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80053d8:	693b      	ldr	r3, [r7, #16]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b085      	sub	sp, #20
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	881a      	ldrh	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	4413      	add	r3, r2
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4413      	add	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800540e:	68fb      	ldr	r3, [r7, #12]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	3301      	adds	r3, #1
 8005432:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800543a:	8a3b      	ldrh	r3, [r7, #16]
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	b21a      	sxth	r2, r3
 8005440:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005444:	4313      	orrs	r3, r2
 8005446:	b21b      	sxth	r3, r3
 8005448:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800544a:	89fb      	ldrh	r3, [r7, #14]
}
 800544c:	4618      	mov	r0, r3
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005462:	2300      	movs	r3, #0
 8005464:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800546e:	2b40      	cmp	r3, #64	; 0x40
 8005470:	d005      	beq.n	800547e <USBD_StdDevReq+0x26>
 8005472:	2b40      	cmp	r3, #64	; 0x40
 8005474:	d857      	bhi.n	8005526 <USBD_StdDevReq+0xce>
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00f      	beq.n	800549a <USBD_StdDevReq+0x42>
 800547a:	2b20      	cmp	r3, #32
 800547c:	d153      	bne.n	8005526 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	32ae      	adds	r2, #174	; 0xae
 8005488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	6839      	ldr	r1, [r7, #0]
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	4798      	blx	r3
 8005494:	4603      	mov	r3, r0
 8005496:	73fb      	strb	r3, [r7, #15]
      break;
 8005498:	e04a      	b.n	8005530 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	785b      	ldrb	r3, [r3, #1]
 800549e:	2b09      	cmp	r3, #9
 80054a0:	d83b      	bhi.n	800551a <USBD_StdDevReq+0xc2>
 80054a2:	a201      	add	r2, pc, #4	; (adr r2, 80054a8 <USBD_StdDevReq+0x50>)
 80054a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a8:	080054fd 	.word	0x080054fd
 80054ac:	08005511 	.word	0x08005511
 80054b0:	0800551b 	.word	0x0800551b
 80054b4:	08005507 	.word	0x08005507
 80054b8:	0800551b 	.word	0x0800551b
 80054bc:	080054db 	.word	0x080054db
 80054c0:	080054d1 	.word	0x080054d1
 80054c4:	0800551b 	.word	0x0800551b
 80054c8:	080054f3 	.word	0x080054f3
 80054cc:	080054e5 	.word	0x080054e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80054d0:	6839      	ldr	r1, [r7, #0]
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fa3c 	bl	8005950 <USBD_GetDescriptor>
          break;
 80054d8:	e024      	b.n	8005524 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80054da:	6839      	ldr	r1, [r7, #0]
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fba1 	bl	8005c24 <USBD_SetAddress>
          break;
 80054e2:	e01f      	b.n	8005524 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80054e4:	6839      	ldr	r1, [r7, #0]
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fbe0 	bl	8005cac <USBD_SetConfig>
 80054ec:	4603      	mov	r3, r0
 80054ee:	73fb      	strb	r3, [r7, #15]
          break;
 80054f0:	e018      	b.n	8005524 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80054f2:	6839      	ldr	r1, [r7, #0]
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fc83 	bl	8005e00 <USBD_GetConfig>
          break;
 80054fa:	e013      	b.n	8005524 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80054fc:	6839      	ldr	r1, [r7, #0]
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fcb4 	bl	8005e6c <USBD_GetStatus>
          break;
 8005504:	e00e      	b.n	8005524 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fce3 	bl	8005ed4 <USBD_SetFeature>
          break;
 800550e:	e009      	b.n	8005524 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005510:	6839      	ldr	r1, [r7, #0]
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fd07 	bl	8005f26 <USBD_ClrFeature>
          break;
 8005518:	e004      	b.n	8005524 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800551a:	6839      	ldr	r1, [r7, #0]
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fd5e 	bl	8005fde <USBD_CtlError>
          break;
 8005522:	bf00      	nop
      }
      break;
 8005524:	e004      	b.n	8005530 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005526:	6839      	ldr	r1, [r7, #0]
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 fd58 	bl	8005fde <USBD_CtlError>
      break;
 800552e:	bf00      	nop
  }

  return ret;
 8005530:	7bfb      	ldrb	r3, [r7, #15]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop

0800553c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005552:	2b40      	cmp	r3, #64	; 0x40
 8005554:	d005      	beq.n	8005562 <USBD_StdItfReq+0x26>
 8005556:	2b40      	cmp	r3, #64	; 0x40
 8005558:	d852      	bhi.n	8005600 <USBD_StdItfReq+0xc4>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <USBD_StdItfReq+0x26>
 800555e:	2b20      	cmp	r3, #32
 8005560:	d14e      	bne.n	8005600 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005568:	b2db      	uxtb	r3, r3
 800556a:	3b01      	subs	r3, #1
 800556c:	2b02      	cmp	r3, #2
 800556e:	d840      	bhi.n	80055f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	889b      	ldrh	r3, [r3, #4]
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b01      	cmp	r3, #1
 8005578:	d836      	bhi.n	80055e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	889b      	ldrh	r3, [r3, #4]
 800557e:	b2db      	uxtb	r3, r3
 8005580:	4619      	mov	r1, r3
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7ff fed9 	bl	800533a <USBD_CoreFindIF>
 8005588:	4603      	mov	r3, r0
 800558a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800558c:	7bbb      	ldrb	r3, [r7, #14]
 800558e:	2bff      	cmp	r3, #255	; 0xff
 8005590:	d01d      	beq.n	80055ce <USBD_StdItfReq+0x92>
 8005592:	7bbb      	ldrb	r3, [r7, #14]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d11a      	bne.n	80055ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005598:	7bba      	ldrb	r2, [r7, #14]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	32ae      	adds	r2, #174	; 0xae
 800559e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00f      	beq.n	80055c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80055a8:	7bba      	ldrb	r2, [r7, #14]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80055b0:	7bba      	ldrb	r2, [r7, #14]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	32ae      	adds	r2, #174	; 0xae
 80055b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	6839      	ldr	r1, [r7, #0]
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	4798      	blx	r3
 80055c2:	4603      	mov	r3, r0
 80055c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80055c6:	e004      	b.n	80055d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80055c8:	2303      	movs	r3, #3
 80055ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80055cc:	e001      	b.n	80055d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80055ce:	2303      	movs	r3, #3
 80055d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	88db      	ldrh	r3, [r3, #6]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d110      	bne.n	80055fc <USBD_StdItfReq+0xc0>
 80055da:	7bfb      	ldrb	r3, [r7, #15]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10d      	bne.n	80055fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fdc7 	bl	8006174 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80055e6:	e009      	b.n	80055fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fcf7 	bl	8005fde <USBD_CtlError>
          break;
 80055f0:	e004      	b.n	80055fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80055f2:	6839      	ldr	r1, [r7, #0]
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fcf2 	bl	8005fde <USBD_CtlError>
          break;
 80055fa:	e000      	b.n	80055fe <USBD_StdItfReq+0xc2>
          break;
 80055fc:	bf00      	nop
      }
      break;
 80055fe:	e004      	b.n	800560a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005600:	6839      	ldr	r1, [r7, #0]
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fceb 	bl	8005fde <USBD_CtlError>
      break;
 8005608:	bf00      	nop
  }

  return ret;
 800560a:	7bfb      	ldrb	r3, [r7, #15]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	889b      	ldrh	r3, [r3, #4]
 8005626:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005630:	2b40      	cmp	r3, #64	; 0x40
 8005632:	d007      	beq.n	8005644 <USBD_StdEPReq+0x30>
 8005634:	2b40      	cmp	r3, #64	; 0x40
 8005636:	f200 817f 	bhi.w	8005938 <USBD_StdEPReq+0x324>
 800563a:	2b00      	cmp	r3, #0
 800563c:	d02a      	beq.n	8005694 <USBD_StdEPReq+0x80>
 800563e:	2b20      	cmp	r3, #32
 8005640:	f040 817a 	bne.w	8005938 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005644:	7bbb      	ldrb	r3, [r7, #14]
 8005646:	4619      	mov	r1, r3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff fe83 	bl	8005354 <USBD_CoreFindEP>
 800564e:	4603      	mov	r3, r0
 8005650:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005652:	7b7b      	ldrb	r3, [r7, #13]
 8005654:	2bff      	cmp	r3, #255	; 0xff
 8005656:	f000 8174 	beq.w	8005942 <USBD_StdEPReq+0x32e>
 800565a:	7b7b      	ldrb	r3, [r7, #13]
 800565c:	2b00      	cmp	r3, #0
 800565e:	f040 8170 	bne.w	8005942 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005662:	7b7a      	ldrb	r2, [r7, #13]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800566a:	7b7a      	ldrb	r2, [r7, #13]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	32ae      	adds	r2, #174	; 0xae
 8005670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 8163 	beq.w	8005942 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800567c:	7b7a      	ldrb	r2, [r7, #13]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	32ae      	adds	r2, #174	; 0xae
 8005682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	6839      	ldr	r1, [r7, #0]
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	4798      	blx	r3
 800568e:	4603      	mov	r3, r0
 8005690:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005692:	e156      	b.n	8005942 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	785b      	ldrb	r3, [r3, #1]
 8005698:	2b03      	cmp	r3, #3
 800569a:	d008      	beq.n	80056ae <USBD_StdEPReq+0x9a>
 800569c:	2b03      	cmp	r3, #3
 800569e:	f300 8145 	bgt.w	800592c <USBD_StdEPReq+0x318>
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f000 809b 	beq.w	80057de <USBD_StdEPReq+0x1ca>
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d03c      	beq.n	8005726 <USBD_StdEPReq+0x112>
 80056ac:	e13e      	b.n	800592c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d002      	beq.n	80056c0 <USBD_StdEPReq+0xac>
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d016      	beq.n	80056ec <USBD_StdEPReq+0xd8>
 80056be:	e02c      	b.n	800571a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80056c0:	7bbb      	ldrb	r3, [r7, #14]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00d      	beq.n	80056e2 <USBD_StdEPReq+0xce>
 80056c6:	7bbb      	ldrb	r3, [r7, #14]
 80056c8:	2b80      	cmp	r3, #128	; 0x80
 80056ca:	d00a      	beq.n	80056e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80056cc:	7bbb      	ldrb	r3, [r7, #14]
 80056ce:	4619      	mov	r1, r3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f001 f96d 	bl	80069b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80056d6:	2180      	movs	r1, #128	; 0x80
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f001 f969 	bl	80069b0 <USBD_LL_StallEP>
 80056de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80056e0:	e020      	b.n	8005724 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80056e2:	6839      	ldr	r1, [r7, #0]
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fc7a 	bl	8005fde <USBD_CtlError>
              break;
 80056ea:	e01b      	b.n	8005724 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	885b      	ldrh	r3, [r3, #2]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10e      	bne.n	8005712 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80056f4:	7bbb      	ldrb	r3, [r7, #14]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00b      	beq.n	8005712 <USBD_StdEPReq+0xfe>
 80056fa:	7bbb      	ldrb	r3, [r7, #14]
 80056fc:	2b80      	cmp	r3, #128	; 0x80
 80056fe:	d008      	beq.n	8005712 <USBD_StdEPReq+0xfe>
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	88db      	ldrh	r3, [r3, #6]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d104      	bne.n	8005712 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005708:	7bbb      	ldrb	r3, [r7, #14]
 800570a:	4619      	mov	r1, r3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f001 f94f 	bl	80069b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fd2e 	bl	8006174 <USBD_CtlSendStatus>

              break;
 8005718:	e004      	b.n	8005724 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800571a:	6839      	ldr	r1, [r7, #0]
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 fc5e 	bl	8005fde <USBD_CtlError>
              break;
 8005722:	bf00      	nop
          }
          break;
 8005724:	e107      	b.n	8005936 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d002      	beq.n	8005738 <USBD_StdEPReq+0x124>
 8005732:	2b03      	cmp	r3, #3
 8005734:	d016      	beq.n	8005764 <USBD_StdEPReq+0x150>
 8005736:	e04b      	b.n	80057d0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005738:	7bbb      	ldrb	r3, [r7, #14]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00d      	beq.n	800575a <USBD_StdEPReq+0x146>
 800573e:	7bbb      	ldrb	r3, [r7, #14]
 8005740:	2b80      	cmp	r3, #128	; 0x80
 8005742:	d00a      	beq.n	800575a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005744:	7bbb      	ldrb	r3, [r7, #14]
 8005746:	4619      	mov	r1, r3
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f001 f931 	bl	80069b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800574e:	2180      	movs	r1, #128	; 0x80
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f001 f92d 	bl	80069b0 <USBD_LL_StallEP>
 8005756:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005758:	e040      	b.n	80057dc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800575a:	6839      	ldr	r1, [r7, #0]
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 fc3e 	bl	8005fde <USBD_CtlError>
              break;
 8005762:	e03b      	b.n	80057dc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	885b      	ldrh	r3, [r3, #2]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d136      	bne.n	80057da <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800576c:	7bbb      	ldrb	r3, [r7, #14]
 800576e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005772:	2b00      	cmp	r3, #0
 8005774:	d004      	beq.n	8005780 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005776:	7bbb      	ldrb	r3, [r7, #14]
 8005778:	4619      	mov	r1, r3
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f001 f937 	bl	80069ee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 fcf7 	bl	8006174 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005786:	7bbb      	ldrb	r3, [r7, #14]
 8005788:	4619      	mov	r1, r3
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff fde2 	bl	8005354 <USBD_CoreFindEP>
 8005790:	4603      	mov	r3, r0
 8005792:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005794:	7b7b      	ldrb	r3, [r7, #13]
 8005796:	2bff      	cmp	r3, #255	; 0xff
 8005798:	d01f      	beq.n	80057da <USBD_StdEPReq+0x1c6>
 800579a:	7b7b      	ldrb	r3, [r7, #13]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d11c      	bne.n	80057da <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80057a0:	7b7a      	ldrb	r2, [r7, #13]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80057a8:	7b7a      	ldrb	r2, [r7, #13]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	32ae      	adds	r2, #174	; 0xae
 80057ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d010      	beq.n	80057da <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80057b8:	7b7a      	ldrb	r2, [r7, #13]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	32ae      	adds	r2, #174	; 0xae
 80057be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	6839      	ldr	r1, [r7, #0]
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	4798      	blx	r3
 80057ca:	4603      	mov	r3, r0
 80057cc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80057ce:	e004      	b.n	80057da <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80057d0:	6839      	ldr	r1, [r7, #0]
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fc03 	bl	8005fde <USBD_CtlError>
              break;
 80057d8:	e000      	b.n	80057dc <USBD_StdEPReq+0x1c8>
              break;
 80057da:	bf00      	nop
          }
          break;
 80057dc:	e0ab      	b.n	8005936 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d002      	beq.n	80057f0 <USBD_StdEPReq+0x1dc>
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d032      	beq.n	8005854 <USBD_StdEPReq+0x240>
 80057ee:	e097      	b.n	8005920 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057f0:	7bbb      	ldrb	r3, [r7, #14]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d007      	beq.n	8005806 <USBD_StdEPReq+0x1f2>
 80057f6:	7bbb      	ldrb	r3, [r7, #14]
 80057f8:	2b80      	cmp	r3, #128	; 0x80
 80057fa:	d004      	beq.n	8005806 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80057fc:	6839      	ldr	r1, [r7, #0]
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fbed 	bl	8005fde <USBD_CtlError>
                break;
 8005804:	e091      	b.n	800592a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005806:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800580a:	2b00      	cmp	r3, #0
 800580c:	da0b      	bge.n	8005826 <USBD_StdEPReq+0x212>
 800580e:	7bbb      	ldrb	r3, [r7, #14]
 8005810:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005814:	4613      	mov	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	3310      	adds	r3, #16
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	4413      	add	r3, r2
 8005822:	3304      	adds	r3, #4
 8005824:	e00b      	b.n	800583e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005826:	7bbb      	ldrb	r3, [r7, #14]
 8005828:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800582c:	4613      	mov	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	4413      	add	r3, r2
 800583c:	3304      	adds	r3, #4
 800583e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	2202      	movs	r2, #2
 800584a:	4619      	mov	r1, r3
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fc37 	bl	80060c0 <USBD_CtlSendData>
              break;
 8005852:	e06a      	b.n	800592a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005854:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005858:	2b00      	cmp	r3, #0
 800585a:	da11      	bge.n	8005880 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800585c:	7bbb      	ldrb	r3, [r7, #14]
 800585e:	f003 020f 	and.w	r2, r3, #15
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	4613      	mov	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	3324      	adds	r3, #36	; 0x24
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d117      	bne.n	80058a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005876:	6839      	ldr	r1, [r7, #0]
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 fbb0 	bl	8005fde <USBD_CtlError>
                  break;
 800587e:	e054      	b.n	800592a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005880:	7bbb      	ldrb	r3, [r7, #14]
 8005882:	f003 020f 	and.w	r2, r3, #15
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	440b      	add	r3, r1
 8005892:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d104      	bne.n	80058a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800589c:	6839      	ldr	r1, [r7, #0]
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fb9d 	bl	8005fde <USBD_CtlError>
                  break;
 80058a4:	e041      	b.n	800592a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	da0b      	bge.n	80058c6 <USBD_StdEPReq+0x2b2>
 80058ae:	7bbb      	ldrb	r3, [r7, #14]
 80058b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058b4:	4613      	mov	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	3310      	adds	r3, #16
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	4413      	add	r3, r2
 80058c2:	3304      	adds	r3, #4
 80058c4:	e00b      	b.n	80058de <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80058c6:	7bbb      	ldrb	r3, [r7, #14]
 80058c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058cc:	4613      	mov	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	4413      	add	r3, r2
 80058dc:	3304      	adds	r3, #4
 80058de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80058e0:	7bbb      	ldrb	r3, [r7, #14]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <USBD_StdEPReq+0x2d8>
 80058e6:	7bbb      	ldrb	r3, [r7, #14]
 80058e8:	2b80      	cmp	r3, #128	; 0x80
 80058ea:	d103      	bne.n	80058f4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2200      	movs	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	e00e      	b.n	8005912 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80058f4:	7bbb      	ldrb	r3, [r7, #14]
 80058f6:	4619      	mov	r1, r3
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f001 f897 	bl	8006a2c <USBD_LL_IsStallEP>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2201      	movs	r2, #1
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	e002      	b.n	8005912 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2202      	movs	r2, #2
 8005916:	4619      	mov	r1, r3
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 fbd1 	bl	80060c0 <USBD_CtlSendData>
              break;
 800591e:	e004      	b.n	800592a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005920:	6839      	ldr	r1, [r7, #0]
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fb5b 	bl	8005fde <USBD_CtlError>
              break;
 8005928:	bf00      	nop
          }
          break;
 800592a:	e004      	b.n	8005936 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800592c:	6839      	ldr	r1, [r7, #0]
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fb55 	bl	8005fde <USBD_CtlError>
          break;
 8005934:	bf00      	nop
      }
      break;
 8005936:	e005      	b.n	8005944 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005938:	6839      	ldr	r1, [r7, #0]
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fb4f 	bl	8005fde <USBD_CtlError>
      break;
 8005940:	e000      	b.n	8005944 <USBD_StdEPReq+0x330>
      break;
 8005942:	bf00      	nop
  }

  return ret;
 8005944:	7bfb      	ldrb	r3, [r7, #15]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
	...

08005950 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800595e:	2300      	movs	r3, #0
 8005960:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005962:	2300      	movs	r3, #0
 8005964:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	885b      	ldrh	r3, [r3, #2]
 800596a:	0a1b      	lsrs	r3, r3, #8
 800596c:	b29b      	uxth	r3, r3
 800596e:	3b01      	subs	r3, #1
 8005970:	2b06      	cmp	r3, #6
 8005972:	f200 8128 	bhi.w	8005bc6 <USBD_GetDescriptor+0x276>
 8005976:	a201      	add	r2, pc, #4	; (adr r2, 800597c <USBD_GetDescriptor+0x2c>)
 8005978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597c:	08005999 	.word	0x08005999
 8005980:	080059b1 	.word	0x080059b1
 8005984:	080059f1 	.word	0x080059f1
 8005988:	08005bc7 	.word	0x08005bc7
 800598c:	08005bc7 	.word	0x08005bc7
 8005990:	08005b67 	.word	0x08005b67
 8005994:	08005b93 	.word	0x08005b93
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	7c12      	ldrb	r2, [r2, #16]
 80059a4:	f107 0108 	add.w	r1, r7, #8
 80059a8:	4610      	mov	r0, r2
 80059aa:	4798      	blx	r3
 80059ac:	60f8      	str	r0, [r7, #12]
      break;
 80059ae:	e112      	b.n	8005bd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	7c1b      	ldrb	r3, [r3, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10d      	bne.n	80059d4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c0:	f107 0208 	add.w	r2, r7, #8
 80059c4:	4610      	mov	r0, r2
 80059c6:	4798      	blx	r3
 80059c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3301      	adds	r3, #1
 80059ce:	2202      	movs	r2, #2
 80059d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80059d2:	e100      	b.n	8005bd6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	f107 0208 	add.w	r2, r7, #8
 80059e0:	4610      	mov	r0, r2
 80059e2:	4798      	blx	r3
 80059e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3301      	adds	r3, #1
 80059ea:	2202      	movs	r2, #2
 80059ec:	701a      	strb	r2, [r3, #0]
      break;
 80059ee:	e0f2      	b.n	8005bd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	885b      	ldrh	r3, [r3, #2]
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b05      	cmp	r3, #5
 80059f8:	f200 80ac 	bhi.w	8005b54 <USBD_GetDescriptor+0x204>
 80059fc:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <USBD_GetDescriptor+0xb4>)
 80059fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a02:	bf00      	nop
 8005a04:	08005a1d 	.word	0x08005a1d
 8005a08:	08005a51 	.word	0x08005a51
 8005a0c:	08005a85 	.word	0x08005a85
 8005a10:	08005ab9 	.word	0x08005ab9
 8005a14:	08005aed 	.word	0x08005aed
 8005a18:	08005b21 	.word	0x08005b21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00b      	beq.n	8005a40 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	7c12      	ldrb	r2, [r2, #16]
 8005a34:	f107 0108 	add.w	r1, r7, #8
 8005a38:	4610      	mov	r0, r2
 8005a3a:	4798      	blx	r3
 8005a3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a3e:	e091      	b.n	8005b64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a40:	6839      	ldr	r1, [r7, #0]
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 facb 	bl	8005fde <USBD_CtlError>
            err++;
 8005a48:	7afb      	ldrb	r3, [r7, #11]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	72fb      	strb	r3, [r7, #11]
          break;
 8005a4e:	e089      	b.n	8005b64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00b      	beq.n	8005a74 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	7c12      	ldrb	r2, [r2, #16]
 8005a68:	f107 0108 	add.w	r1, r7, #8
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	4798      	blx	r3
 8005a70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a72:	e077      	b.n	8005b64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005a74:	6839      	ldr	r1, [r7, #0]
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fab1 	bl	8005fde <USBD_CtlError>
            err++;
 8005a7c:	7afb      	ldrb	r3, [r7, #11]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	72fb      	strb	r3, [r7, #11]
          break;
 8005a82:	e06f      	b.n	8005b64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00b      	beq.n	8005aa8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	7c12      	ldrb	r2, [r2, #16]
 8005a9c:	f107 0108 	add.w	r1, r7, #8
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	4798      	blx	r3
 8005aa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005aa6:	e05d      	b.n	8005b64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005aa8:	6839      	ldr	r1, [r7, #0]
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fa97 	bl	8005fde <USBD_CtlError>
            err++;
 8005ab0:	7afb      	ldrb	r3, [r7, #11]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	72fb      	strb	r3, [r7, #11]
          break;
 8005ab6:	e055      	b.n	8005b64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00b      	beq.n	8005adc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	7c12      	ldrb	r2, [r2, #16]
 8005ad0:	f107 0108 	add.w	r1, r7, #8
 8005ad4:	4610      	mov	r0, r2
 8005ad6:	4798      	blx	r3
 8005ad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ada:	e043      	b.n	8005b64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005adc:	6839      	ldr	r1, [r7, #0]
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fa7d 	bl	8005fde <USBD_CtlError>
            err++;
 8005ae4:	7afb      	ldrb	r3, [r7, #11]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	72fb      	strb	r3, [r7, #11]
          break;
 8005aea:	e03b      	b.n	8005b64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00b      	beq.n	8005b10 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	7c12      	ldrb	r2, [r2, #16]
 8005b04:	f107 0108 	add.w	r1, r7, #8
 8005b08:	4610      	mov	r0, r2
 8005b0a:	4798      	blx	r3
 8005b0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b0e:	e029      	b.n	8005b64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b10:	6839      	ldr	r1, [r7, #0]
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fa63 	bl	8005fde <USBD_CtlError>
            err++;
 8005b18:	7afb      	ldrb	r3, [r7, #11]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	72fb      	strb	r3, [r7, #11]
          break;
 8005b1e:	e021      	b.n	8005b64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00b      	beq.n	8005b44 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	7c12      	ldrb	r2, [r2, #16]
 8005b38:	f107 0108 	add.w	r1, r7, #8
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4798      	blx	r3
 8005b40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b42:	e00f      	b.n	8005b64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b44:	6839      	ldr	r1, [r7, #0]
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fa49 	bl	8005fde <USBD_CtlError>
            err++;
 8005b4c:	7afb      	ldrb	r3, [r7, #11]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	72fb      	strb	r3, [r7, #11]
          break;
 8005b52:	e007      	b.n	8005b64 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005b54:	6839      	ldr	r1, [r7, #0]
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fa41 	bl	8005fde <USBD_CtlError>
          err++;
 8005b5c:	7afb      	ldrb	r3, [r7, #11]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005b62:	bf00      	nop
      }
      break;
 8005b64:	e037      	b.n	8005bd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	7c1b      	ldrb	r3, [r3, #16]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d109      	bne.n	8005b82 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b76:	f107 0208 	add.w	r2, r7, #8
 8005b7a:	4610      	mov	r0, r2
 8005b7c:	4798      	blx	r3
 8005b7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b80:	e029      	b.n	8005bd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005b82:	6839      	ldr	r1, [r7, #0]
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fa2a 	bl	8005fde <USBD_CtlError>
        err++;
 8005b8a:	7afb      	ldrb	r3, [r7, #11]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	72fb      	strb	r3, [r7, #11]
      break;
 8005b90:	e021      	b.n	8005bd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	7c1b      	ldrb	r3, [r3, #16]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10d      	bne.n	8005bb6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	f107 0208 	add.w	r2, r7, #8
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	4798      	blx	r3
 8005baa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	2207      	movs	r2, #7
 8005bb2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005bb4:	e00f      	b.n	8005bd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fa10 	bl	8005fde <USBD_CtlError>
        err++;
 8005bbe:	7afb      	ldrb	r3, [r7, #11]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	72fb      	strb	r3, [r7, #11]
      break;
 8005bc4:	e007      	b.n	8005bd6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005bc6:	6839      	ldr	r1, [r7, #0]
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fa08 	bl	8005fde <USBD_CtlError>
      err++;
 8005bce:	7afb      	ldrb	r3, [r7, #11]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	72fb      	strb	r3, [r7, #11]
      break;
 8005bd4:	bf00      	nop
  }

  if (err != 0U)
 8005bd6:	7afb      	ldrb	r3, [r7, #11]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d11e      	bne.n	8005c1a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	88db      	ldrh	r3, [r3, #6]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d016      	beq.n	8005c12 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005be4:	893b      	ldrh	r3, [r7, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00e      	beq.n	8005c08 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	88da      	ldrh	r2, [r3, #6]
 8005bee:	893b      	ldrh	r3, [r7, #8]
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	bf28      	it	cs
 8005bf4:	4613      	movcs	r3, r2
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005bfa:	893b      	ldrh	r3, [r7, #8]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	68f9      	ldr	r1, [r7, #12]
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fa5d 	bl	80060c0 <USBD_CtlSendData>
 8005c06:	e009      	b.n	8005c1c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005c08:	6839      	ldr	r1, [r7, #0]
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f9e7 	bl	8005fde <USBD_CtlError>
 8005c10:	e004      	b.n	8005c1c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 faae 	bl	8006174 <USBD_CtlSendStatus>
 8005c18:	e000      	b.n	8005c1c <USBD_GetDescriptor+0x2cc>
    return;
 8005c1a:	bf00      	nop
  }
}
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop

08005c24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	889b      	ldrh	r3, [r3, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d131      	bne.n	8005c9a <USBD_SetAddress+0x76>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	88db      	ldrh	r3, [r3, #6]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d12d      	bne.n	8005c9a <USBD_SetAddress+0x76>
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	885b      	ldrh	r3, [r3, #2]
 8005c42:	2b7f      	cmp	r3, #127	; 0x7f
 8005c44:	d829      	bhi.n	8005c9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	885b      	ldrh	r3, [r3, #2]
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d104      	bne.n	8005c68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005c5e:	6839      	ldr	r1, [r7, #0]
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f9bc 	bl	8005fde <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c66:	e01d      	b.n	8005ca4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	7bfa      	ldrb	r2, [r7, #15]
 8005c6c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
 8005c72:	4619      	mov	r1, r3
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 ff05 	bl	8006a84 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fa7a 	bl	8006174 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d004      	beq.n	8005c90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2202      	movs	r2, #2
 8005c8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c8e:	e009      	b.n	8005ca4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c98:	e004      	b.n	8005ca4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005c9a:	6839      	ldr	r1, [r7, #0]
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f99e 	bl	8005fde <USBD_CtlError>
  }
}
 8005ca2:	bf00      	nop
 8005ca4:	bf00      	nop
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	885b      	ldrh	r3, [r3, #2]
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	4b4e      	ldr	r3, [pc, #312]	; (8005dfc <USBD_SetConfig+0x150>)
 8005cc2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005cc4:	4b4d      	ldr	r3, [pc, #308]	; (8005dfc <USBD_SetConfig+0x150>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d905      	bls.n	8005cd8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005ccc:	6839      	ldr	r1, [r7, #0]
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f985 	bl	8005fde <USBD_CtlError>
    return USBD_FAIL;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e08c      	b.n	8005df2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d002      	beq.n	8005cea <USBD_SetConfig+0x3e>
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d029      	beq.n	8005d3c <USBD_SetConfig+0x90>
 8005ce8:	e075      	b.n	8005dd6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005cea:	4b44      	ldr	r3, [pc, #272]	; (8005dfc <USBD_SetConfig+0x150>)
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d020      	beq.n	8005d34 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005cf2:	4b42      	ldr	r3, [pc, #264]	; (8005dfc <USBD_SetConfig+0x150>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005cfc:	4b3f      	ldr	r3, [pc, #252]	; (8005dfc <USBD_SetConfig+0x150>)
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	4619      	mov	r1, r3
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fe ffe1 	bl	8004cca <USBD_SetClassConfig>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d008      	beq.n	8005d24 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005d12:	6839      	ldr	r1, [r7, #0]
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f962 	bl	8005fde <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005d22:	e065      	b.n	8005df0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fa25 	bl	8006174 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2203      	movs	r2, #3
 8005d2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005d32:	e05d      	b.n	8005df0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fa1d 	bl	8006174 <USBD_CtlSendStatus>
      break;
 8005d3a:	e059      	b.n	8005df0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005d3c:	4b2f      	ldr	r3, [pc, #188]	; (8005dfc <USBD_SetConfig+0x150>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d112      	bne.n	8005d6a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005d4c:	4b2b      	ldr	r3, [pc, #172]	; (8005dfc <USBD_SetConfig+0x150>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	461a      	mov	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005d56:	4b29      	ldr	r3, [pc, #164]	; (8005dfc <USBD_SetConfig+0x150>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7fe ffd0 	bl	8004d02 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fa06 	bl	8006174 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005d68:	e042      	b.n	8005df0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005d6a:	4b24      	ldr	r3, [pc, #144]	; (8005dfc <USBD_SetConfig+0x150>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d02a      	beq.n	8005dce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	4619      	mov	r1, r3
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7fe ffbe 	bl	8004d02 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005d86:	4b1d      	ldr	r3, [pc, #116]	; (8005dfc <USBD_SetConfig+0x150>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005d90:	4b1a      	ldr	r3, [pc, #104]	; (8005dfc <USBD_SetConfig+0x150>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	4619      	mov	r1, r3
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fe ff97 	bl	8004cca <USBD_SetClassConfig>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00f      	beq.n	8005dc6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005da6:	6839      	ldr	r1, [r7, #0]
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 f918 	bl	8005fde <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	4619      	mov	r1, r3
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7fe ffa3 	bl	8004d02 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005dc4:	e014      	b.n	8005df0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f9d4 	bl	8006174 <USBD_CtlSendStatus>
      break;
 8005dcc:	e010      	b.n	8005df0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f9d0 	bl	8006174 <USBD_CtlSendStatus>
      break;
 8005dd4:	e00c      	b.n	8005df0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005dd6:	6839      	ldr	r1, [r7, #0]
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f900 	bl	8005fde <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005dde:	4b07      	ldr	r3, [pc, #28]	; (8005dfc <USBD_SetConfig+0x150>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	4619      	mov	r1, r3
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7fe ff8c 	bl	8004d02 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005dea:	2303      	movs	r3, #3
 8005dec:	73fb      	strb	r3, [r7, #15]
      break;
 8005dee:	bf00      	nop
  }

  return ret;
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	2000011c 	.word	0x2000011c

08005e00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	88db      	ldrh	r3, [r3, #6]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d004      	beq.n	8005e1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f8e2 	bl	8005fde <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005e1a:	e023      	b.n	8005e64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	dc02      	bgt.n	8005e2e <USBD_GetConfig+0x2e>
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	dc03      	bgt.n	8005e34 <USBD_GetConfig+0x34>
 8005e2c:	e015      	b.n	8005e5a <USBD_GetConfig+0x5a>
 8005e2e:	2b03      	cmp	r3, #3
 8005e30:	d00b      	beq.n	8005e4a <USBD_GetConfig+0x4a>
 8005e32:	e012      	b.n	8005e5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	2201      	movs	r2, #1
 8005e40:	4619      	mov	r1, r3
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f93c 	bl	80060c0 <USBD_CtlSendData>
        break;
 8005e48:	e00c      	b.n	8005e64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	2201      	movs	r2, #1
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f934 	bl	80060c0 <USBD_CtlSendData>
        break;
 8005e58:	e004      	b.n	8005e64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005e5a:	6839      	ldr	r1, [r7, #0]
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f8be 	bl	8005fde <USBD_CtlError>
        break;
 8005e62:	bf00      	nop
}
 8005e64:	bf00      	nop
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d81e      	bhi.n	8005ec2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	88db      	ldrh	r3, [r3, #6]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d004      	beq.n	8005e96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005e8c:	6839      	ldr	r1, [r7, #0]
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f8a5 	bl	8005fde <USBD_CtlError>
        break;
 8005e94:	e01a      	b.n	8005ecc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d005      	beq.n	8005eb2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f043 0202 	orr.w	r2, r3, #2
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	330c      	adds	r3, #12
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f900 	bl	80060c0 <USBD_CtlSendData>
      break;
 8005ec0:	e004      	b.n	8005ecc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005ec2:	6839      	ldr	r1, [r7, #0]
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f88a 	bl	8005fde <USBD_CtlError>
      break;
 8005eca:	bf00      	nop
  }
}
 8005ecc:	bf00      	nop
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	885b      	ldrh	r3, [r3, #2]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d107      	bne.n	8005ef6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f940 	bl	8006174 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005ef4:	e013      	b.n	8005f1e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	885b      	ldrh	r3, [r3, #2]
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d10b      	bne.n	8005f16 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	889b      	ldrh	r3, [r3, #4]
 8005f02:	0a1b      	lsrs	r3, r3, #8
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f930 	bl	8006174 <USBD_CtlSendStatus>
}
 8005f14:	e003      	b.n	8005f1e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005f16:	6839      	ldr	r1, [r7, #0]
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f860 	bl	8005fde <USBD_CtlError>
}
 8005f1e:	bf00      	nop
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b082      	sub	sp, #8
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
 8005f2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d80b      	bhi.n	8005f56 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	885b      	ldrh	r3, [r3, #2]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d10c      	bne.n	8005f60 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f910 	bl	8006174 <USBD_CtlSendStatus>
      }
      break;
 8005f54:	e004      	b.n	8005f60 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005f56:	6839      	ldr	r1, [r7, #0]
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f840 	bl	8005fde <USBD_CtlError>
      break;
 8005f5e:	e000      	b.n	8005f62 <USBD_ClrFeature+0x3c>
      break;
 8005f60:	bf00      	nop
  }
}
 8005f62:	bf00      	nop
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	781a      	ldrb	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3301      	adds	r3, #1
 8005f84:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	781a      	ldrb	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3301      	adds	r3, #1
 8005f92:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f7ff fa41 	bl	800541c <SWAPBYTE>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	3301      	adds	r3, #1
 8005fac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f7ff fa34 	bl	800541c <SWAPBYTE>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f7ff fa27 	bl	800541c <SWAPBYTE>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	80da      	strh	r2, [r3, #6]
}
 8005fd6:	bf00      	nop
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b082      	sub	sp, #8
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fe8:	2180      	movs	r1, #128	; 0x80
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 fce0 	bl	80069b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fcdc 	bl	80069b0 <USBD_LL_StallEP>
}
 8005ff8:	bf00      	nop
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d036      	beq.n	8006084 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800601a:	6938      	ldr	r0, [r7, #16]
 800601c:	f000 f836 	bl	800608c <USBD_GetLen>
 8006020:	4603      	mov	r3, r0
 8006022:	3301      	adds	r3, #1
 8006024:	b29b      	uxth	r3, r3
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	b29a      	uxth	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800602e:	7dfb      	ldrb	r3, [r7, #23]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	4413      	add	r3, r2
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	7812      	ldrb	r2, [r2, #0]
 8006038:	701a      	strb	r2, [r3, #0]
  idx++;
 800603a:	7dfb      	ldrb	r3, [r7, #23]
 800603c:	3301      	adds	r3, #1
 800603e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006040:	7dfb      	ldrb	r3, [r7, #23]
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	4413      	add	r3, r2
 8006046:	2203      	movs	r2, #3
 8006048:	701a      	strb	r2, [r3, #0]
  idx++;
 800604a:	7dfb      	ldrb	r3, [r7, #23]
 800604c:	3301      	adds	r3, #1
 800604e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006050:	e013      	b.n	800607a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006052:	7dfb      	ldrb	r3, [r7, #23]
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	4413      	add	r3, r2
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	7812      	ldrb	r2, [r2, #0]
 800605c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	3301      	adds	r3, #1
 8006062:	613b      	str	r3, [r7, #16]
    idx++;
 8006064:	7dfb      	ldrb	r3, [r7, #23]
 8006066:	3301      	adds	r3, #1
 8006068:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800606a:	7dfb      	ldrb	r3, [r7, #23]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	4413      	add	r3, r2
 8006070:	2200      	movs	r2, #0
 8006072:	701a      	strb	r2, [r3, #0]
    idx++;
 8006074:	7dfb      	ldrb	r3, [r7, #23]
 8006076:	3301      	adds	r3, #1
 8006078:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1e7      	bne.n	8006052 <USBD_GetString+0x52>
 8006082:	e000      	b.n	8006086 <USBD_GetString+0x86>
    return;
 8006084:	bf00      	nop
  }
}
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800609c:	e005      	b.n	80060aa <USBD_GetLen+0x1e>
  {
    len++;
 800609e:	7bfb      	ldrb	r3, [r7, #15]
 80060a0:	3301      	adds	r3, #1
 80060a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	3301      	adds	r3, #1
 80060a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1f5      	bne.n	800609e <USBD_GetLen+0x12>
  }

  return len;
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	2100      	movs	r1, #0
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 fceb 	bl	8006ac2 <USBD_LL_Transmit>

  return USBD_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	60f8      	str	r0, [r7, #12]
 80060fe:	60b9      	str	r1, [r7, #8]
 8006100:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	2100      	movs	r1, #0
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 fcda 	bl	8006ac2 <USBD_LL_Transmit>

  return USBD_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2203      	movs	r2, #3
 8006128:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	2100      	movs	r1, #0
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 fcde 	bl	8006b04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	2100      	movs	r1, #0
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 fccd 	bl	8006b04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2204      	movs	r2, #4
 8006180:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006184:	2300      	movs	r3, #0
 8006186:	2200      	movs	r2, #0
 8006188:	2100      	movs	r1, #0
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fc99 	bl	8006ac2 <USBD_LL_Transmit>

  return USBD_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2205      	movs	r2, #5
 80061a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061aa:	2300      	movs	r3, #0
 80061ac:	2200      	movs	r2, #0
 80061ae:	2100      	movs	r1, #0
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fca7 	bl	8006b04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80061c4:	2200      	movs	r2, #0
 80061c6:	4912      	ldr	r1, [pc, #72]	; (8006210 <MX_USB_DEVICE_Init+0x50>)
 80061c8:	4812      	ldr	r0, [pc, #72]	; (8006214 <MX_USB_DEVICE_Init+0x54>)
 80061ca:	f7fe fd01 	bl	8004bd0 <USBD_Init>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80061d4:	f7fa fa38 	bl	8000648 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80061d8:	490f      	ldr	r1, [pc, #60]	; (8006218 <MX_USB_DEVICE_Init+0x58>)
 80061da:	480e      	ldr	r0, [pc, #56]	; (8006214 <MX_USB_DEVICE_Init+0x54>)
 80061dc:	f7fe fd28 	bl	8004c30 <USBD_RegisterClass>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80061e6:	f7fa fa2f 	bl	8000648 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80061ea:	490c      	ldr	r1, [pc, #48]	; (800621c <MX_USB_DEVICE_Init+0x5c>)
 80061ec:	4809      	ldr	r0, [pc, #36]	; (8006214 <MX_USB_DEVICE_Init+0x54>)
 80061ee:	f7fe fc1f 	bl	8004a30 <USBD_CDC_RegisterInterface>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80061f8:	f7fa fa26 	bl	8000648 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80061fc:	4805      	ldr	r0, [pc, #20]	; (8006214 <MX_USB_DEVICE_Init+0x54>)
 80061fe:	f7fe fd4d 	bl	8004c9c <USBD_Start>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d001      	beq.n	800620c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006208:	f7fa fa1e 	bl	8000648 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800620c:	bf00      	nop
 800620e:	bd80      	pop	{r7, pc}
 8006210:	200000ac 	.word	0x200000ac
 8006214:	20000120 	.word	0x20000120
 8006218:	20000018 	.word	0x20000018
 800621c:	20000098 	.word	0x20000098

08006220 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006224:	2200      	movs	r2, #0
 8006226:	4905      	ldr	r1, [pc, #20]	; (800623c <CDC_Init_FS+0x1c>)
 8006228:	4805      	ldr	r0, [pc, #20]	; (8006240 <CDC_Init_FS+0x20>)
 800622a:	f7fe fc1b 	bl	8004a64 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800622e:	4905      	ldr	r1, [pc, #20]	; (8006244 <CDC_Init_FS+0x24>)
 8006230:	4803      	ldr	r0, [pc, #12]	; (8006240 <CDC_Init_FS+0x20>)
 8006232:	f7fe fc39 	bl	8004aa8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006236:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006238:	4618      	mov	r0, r3
 800623a:	bd80      	pop	{r7, pc}
 800623c:	20000bfc 	.word	0x20000bfc
 8006240:	20000120 	.word	0x20000120
 8006244:	200003fc 	.word	0x200003fc

08006248 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800624c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800624e:	4618      	mov	r0, r3
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	4603      	mov	r3, r0
 8006260:	6039      	str	r1, [r7, #0]
 8006262:	71fb      	strb	r3, [r7, #7]
 8006264:	4613      	mov	r3, r2
 8006266:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006268:	79fb      	ldrb	r3, [r7, #7]
 800626a:	2b23      	cmp	r3, #35	; 0x23
 800626c:	d84a      	bhi.n	8006304 <CDC_Control_FS+0xac>
 800626e:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <CDC_Control_FS+0x1c>)
 8006270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006274:	08006305 	.word	0x08006305
 8006278:	08006305 	.word	0x08006305
 800627c:	08006305 	.word	0x08006305
 8006280:	08006305 	.word	0x08006305
 8006284:	08006305 	.word	0x08006305
 8006288:	08006305 	.word	0x08006305
 800628c:	08006305 	.word	0x08006305
 8006290:	08006305 	.word	0x08006305
 8006294:	08006305 	.word	0x08006305
 8006298:	08006305 	.word	0x08006305
 800629c:	08006305 	.word	0x08006305
 80062a0:	08006305 	.word	0x08006305
 80062a4:	08006305 	.word	0x08006305
 80062a8:	08006305 	.word	0x08006305
 80062ac:	08006305 	.word	0x08006305
 80062b0:	08006305 	.word	0x08006305
 80062b4:	08006305 	.word	0x08006305
 80062b8:	08006305 	.word	0x08006305
 80062bc:	08006305 	.word	0x08006305
 80062c0:	08006305 	.word	0x08006305
 80062c4:	08006305 	.word	0x08006305
 80062c8:	08006305 	.word	0x08006305
 80062cc:	08006305 	.word	0x08006305
 80062d0:	08006305 	.word	0x08006305
 80062d4:	08006305 	.word	0x08006305
 80062d8:	08006305 	.word	0x08006305
 80062dc:	08006305 	.word	0x08006305
 80062e0:	08006305 	.word	0x08006305
 80062e4:	08006305 	.word	0x08006305
 80062e8:	08006305 	.word	0x08006305
 80062ec:	08006305 	.word	0x08006305
 80062f0:	08006305 	.word	0x08006305
 80062f4:	08006305 	.word	0x08006305
 80062f8:	08006305 	.word	0x08006305
 80062fc:	08006305 	.word	0x08006305
 8006300:	08006305 	.word	0x08006305
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006304:	bf00      	nop
  }

  return (USBD_OK);
 8006306:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006308:	4618      	mov	r0, r3
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	4805      	ldr	r0, [pc, #20]	; (8006338 <CDC_Receive_FS+0x24>)
 8006322:	f7fe fbc1 	bl	8004aa8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006326:	4804      	ldr	r0, [pc, #16]	; (8006338 <CDC_Receive_FS+0x24>)
 8006328:	f7fe fc1c 	bl	8004b64 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800632c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	20000120 	.word	0x20000120

0800633c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800634c:	4b0d      	ldr	r3, [pc, #52]	; (8006384 <CDC_Transmit_FS+0x48>)
 800634e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006352:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800635e:	2301      	movs	r3, #1
 8006360:	e00b      	b.n	800637a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006362:	887b      	ldrh	r3, [r7, #2]
 8006364:	461a      	mov	r2, r3
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	4806      	ldr	r0, [pc, #24]	; (8006384 <CDC_Transmit_FS+0x48>)
 800636a:	f7fe fb7b 	bl	8004a64 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800636e:	4805      	ldr	r0, [pc, #20]	; (8006384 <CDC_Transmit_FS+0x48>)
 8006370:	f7fe fbb8 	bl	8004ae4 <USBD_CDC_TransmitPacket>
 8006374:	4603      	mov	r3, r0
 8006376:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006378:	7bfb      	ldrb	r3, [r7, #15]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20000120 	.word	0x20000120

08006388 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	4613      	mov	r3, r2
 8006394:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006396:	2300      	movs	r3, #0
 8006398:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800639a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	371c      	adds	r7, #28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
	...

080063ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	4603      	mov	r3, r0
 80063b4:	6039      	str	r1, [r7, #0]
 80063b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2212      	movs	r2, #18
 80063bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80063be:	4b03      	ldr	r3, [pc, #12]	; (80063cc <USBD_FS_DeviceDescriptor+0x20>)
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	200000c8 	.word	0x200000c8

080063d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	4603      	mov	r3, r0
 80063d8:	6039      	str	r1, [r7, #0]
 80063da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	2204      	movs	r2, #4
 80063e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80063e2:	4b03      	ldr	r3, [pc, #12]	; (80063f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	200000dc 	.word	0x200000dc

080063f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	4603      	mov	r3, r0
 80063fc:	6039      	str	r1, [r7, #0]
 80063fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006400:	79fb      	ldrb	r3, [r7, #7]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d105      	bne.n	8006412 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	4907      	ldr	r1, [pc, #28]	; (8006428 <USBD_FS_ProductStrDescriptor+0x34>)
 800640a:	4808      	ldr	r0, [pc, #32]	; (800642c <USBD_FS_ProductStrDescriptor+0x38>)
 800640c:	f7ff fdf8 	bl	8006000 <USBD_GetString>
 8006410:	e004      	b.n	800641c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	4904      	ldr	r1, [pc, #16]	; (8006428 <USBD_FS_ProductStrDescriptor+0x34>)
 8006416:	4805      	ldr	r0, [pc, #20]	; (800642c <USBD_FS_ProductStrDescriptor+0x38>)
 8006418:	f7ff fdf2 	bl	8006000 <USBD_GetString>
  }
  return USBD_StrDesc;
 800641c:	4b02      	ldr	r3, [pc, #8]	; (8006428 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800641e:	4618      	mov	r0, r3
 8006420:	3708      	adds	r7, #8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	200013fc 	.word	0x200013fc
 800642c:	08006c74 	.word	0x08006c74

08006430 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	4603      	mov	r3, r0
 8006438:	6039      	str	r1, [r7, #0]
 800643a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	4904      	ldr	r1, [pc, #16]	; (8006450 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006440:	4804      	ldr	r0, [pc, #16]	; (8006454 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006442:	f7ff fddd 	bl	8006000 <USBD_GetString>
  return USBD_StrDesc;
 8006446:	4b02      	ldr	r3, [pc, #8]	; (8006450 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	200013fc 	.word	0x200013fc
 8006454:	08006c8c 	.word	0x08006c8c

08006458 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	4603      	mov	r3, r0
 8006460:	6039      	str	r1, [r7, #0]
 8006462:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	221a      	movs	r2, #26
 8006468:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800646a:	f000 f843 	bl	80064f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800646e:	4b02      	ldr	r3, [pc, #8]	; (8006478 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006470:	4618      	mov	r0, r3
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	200000e0 	.word	0x200000e0

0800647c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	4603      	mov	r3, r0
 8006484:	6039      	str	r1, [r7, #0]
 8006486:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006488:	79fb      	ldrb	r3, [r7, #7]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d105      	bne.n	800649a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	4907      	ldr	r1, [pc, #28]	; (80064b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006492:	4808      	ldr	r0, [pc, #32]	; (80064b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006494:	f7ff fdb4 	bl	8006000 <USBD_GetString>
 8006498:	e004      	b.n	80064a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	4904      	ldr	r1, [pc, #16]	; (80064b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800649e:	4805      	ldr	r0, [pc, #20]	; (80064b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80064a0:	f7ff fdae 	bl	8006000 <USBD_GetString>
  }
  return USBD_StrDesc;
 80064a4:	4b02      	ldr	r3, [pc, #8]	; (80064b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	200013fc 	.word	0x200013fc
 80064b4:	08006ca0 	.word	0x08006ca0

080064b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	4603      	mov	r3, r0
 80064c0:	6039      	str	r1, [r7, #0]
 80064c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80064c4:	79fb      	ldrb	r3, [r7, #7]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d105      	bne.n	80064d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	4907      	ldr	r1, [pc, #28]	; (80064ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80064ce:	4808      	ldr	r0, [pc, #32]	; (80064f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80064d0:	f7ff fd96 	bl	8006000 <USBD_GetString>
 80064d4:	e004      	b.n	80064e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	4904      	ldr	r1, [pc, #16]	; (80064ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 80064da:	4805      	ldr	r0, [pc, #20]	; (80064f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80064dc:	f7ff fd90 	bl	8006000 <USBD_GetString>
  }
  return USBD_StrDesc;
 80064e0:	4b02      	ldr	r3, [pc, #8]	; (80064ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	200013fc 	.word	0x200013fc
 80064f0:	08006cac 	.word	0x08006cac

080064f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80064fa:	4b0f      	ldr	r3, [pc, #60]	; (8006538 <Get_SerialNum+0x44>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006500:	4b0e      	ldr	r3, [pc, #56]	; (800653c <Get_SerialNum+0x48>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006506:	4b0e      	ldr	r3, [pc, #56]	; (8006540 <Get_SerialNum+0x4c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4413      	add	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d009      	beq.n	800652e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800651a:	2208      	movs	r2, #8
 800651c:	4909      	ldr	r1, [pc, #36]	; (8006544 <Get_SerialNum+0x50>)
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 f814 	bl	800654c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006524:	2204      	movs	r2, #4
 8006526:	4908      	ldr	r1, [pc, #32]	; (8006548 <Get_SerialNum+0x54>)
 8006528:	68b8      	ldr	r0, [r7, #8]
 800652a:	f000 f80f 	bl	800654c <IntToUnicode>
  }
}
 800652e:	bf00      	nop
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	1fff7a10 	.word	0x1fff7a10
 800653c:	1fff7a14 	.word	0x1fff7a14
 8006540:	1fff7a18 	.word	0x1fff7a18
 8006544:	200000e2 	.word	0x200000e2
 8006548:	200000f2 	.word	0x200000f2

0800654c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	4613      	mov	r3, r2
 8006558:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800655a:	2300      	movs	r3, #0
 800655c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800655e:	2300      	movs	r3, #0
 8006560:	75fb      	strb	r3, [r7, #23]
 8006562:	e027      	b.n	80065b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	0f1b      	lsrs	r3, r3, #28
 8006568:	2b09      	cmp	r3, #9
 800656a:	d80b      	bhi.n	8006584 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	0f1b      	lsrs	r3, r3, #28
 8006570:	b2da      	uxtb	r2, r3
 8006572:	7dfb      	ldrb	r3, [r7, #23]
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	4619      	mov	r1, r3
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	440b      	add	r3, r1
 800657c:	3230      	adds	r2, #48	; 0x30
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	701a      	strb	r2, [r3, #0]
 8006582:	e00a      	b.n	800659a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	0f1b      	lsrs	r3, r3, #28
 8006588:	b2da      	uxtb	r2, r3
 800658a:	7dfb      	ldrb	r3, [r7, #23]
 800658c:	005b      	lsls	r3, r3, #1
 800658e:	4619      	mov	r1, r3
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	440b      	add	r3, r1
 8006594:	3237      	adds	r2, #55	; 0x37
 8006596:	b2d2      	uxtb	r2, r2
 8006598:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	011b      	lsls	r3, r3, #4
 800659e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80065a0:	7dfb      	ldrb	r3, [r7, #23]
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	3301      	adds	r3, #1
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	4413      	add	r3, r2
 80065aa:	2200      	movs	r2, #0
 80065ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80065ae:	7dfb      	ldrb	r3, [r7, #23]
 80065b0:	3301      	adds	r3, #1
 80065b2:	75fb      	strb	r3, [r7, #23]
 80065b4:	7dfa      	ldrb	r2, [r7, #23]
 80065b6:	79fb      	ldrb	r3, [r7, #7]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d3d3      	bcc.n	8006564 <IntToUnicode+0x18>
  }
}
 80065bc:	bf00      	nop
 80065be:	bf00      	nop
 80065c0:	371c      	adds	r7, #28
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
	...

080065cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b08a      	sub	sp, #40	; 0x28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065d4:	f107 0314 	add.w	r3, r7, #20
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	605a      	str	r2, [r3, #4]
 80065de:	609a      	str	r2, [r3, #8]
 80065e0:	60da      	str	r2, [r3, #12]
 80065e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065ec:	d13a      	bne.n	8006664 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065ee:	2300      	movs	r3, #0
 80065f0:	613b      	str	r3, [r7, #16]
 80065f2:	4b1e      	ldr	r3, [pc, #120]	; (800666c <HAL_PCD_MspInit+0xa0>)
 80065f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f6:	4a1d      	ldr	r2, [pc, #116]	; (800666c <HAL_PCD_MspInit+0xa0>)
 80065f8:	f043 0301 	orr.w	r3, r3, #1
 80065fc:	6313      	str	r3, [r2, #48]	; 0x30
 80065fe:	4b1b      	ldr	r3, [pc, #108]	; (800666c <HAL_PCD_MspInit+0xa0>)
 8006600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	613b      	str	r3, [r7, #16]
 8006608:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800660a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800660e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006610:	2302      	movs	r3, #2
 8006612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006614:	2300      	movs	r3, #0
 8006616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006618:	2303      	movs	r3, #3
 800661a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800661c:	230a      	movs	r3, #10
 800661e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006620:	f107 0314 	add.w	r3, r7, #20
 8006624:	4619      	mov	r1, r3
 8006626:	4812      	ldr	r0, [pc, #72]	; (8006670 <HAL_PCD_MspInit+0xa4>)
 8006628:	f7fa fa54 	bl	8000ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800662c:	4b0f      	ldr	r3, [pc, #60]	; (800666c <HAL_PCD_MspInit+0xa0>)
 800662e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006630:	4a0e      	ldr	r2, [pc, #56]	; (800666c <HAL_PCD_MspInit+0xa0>)
 8006632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006636:	6353      	str	r3, [r2, #52]	; 0x34
 8006638:	2300      	movs	r3, #0
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	4b0b      	ldr	r3, [pc, #44]	; (800666c <HAL_PCD_MspInit+0xa0>)
 800663e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006640:	4a0a      	ldr	r2, [pc, #40]	; (800666c <HAL_PCD_MspInit+0xa0>)
 8006642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006646:	6453      	str	r3, [r2, #68]	; 0x44
 8006648:	4b08      	ldr	r3, [pc, #32]	; (800666c <HAL_PCD_MspInit+0xa0>)
 800664a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006654:	2200      	movs	r2, #0
 8006656:	2100      	movs	r1, #0
 8006658:	2043      	movs	r0, #67	; 0x43
 800665a:	f7fa fa04 	bl	8000a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800665e:	2043      	movs	r0, #67	; 0x43
 8006660:	f7fa fa1d 	bl	8000a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006664:	bf00      	nop
 8006666:	3728      	adds	r7, #40	; 0x28
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	40023800 	.word	0x40023800
 8006670:	40020000 	.word	0x40020000

08006674 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006688:	4619      	mov	r1, r3
 800668a:	4610      	mov	r0, r2
 800668c:	f7fe fb53 	bl	8004d36 <USBD_LL_SetupStage>
}
 8006690:	bf00      	nop
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80066aa:	78fa      	ldrb	r2, [r7, #3]
 80066ac:	6879      	ldr	r1, [r7, #4]
 80066ae:	4613      	mov	r3, r2
 80066b0:	00db      	lsls	r3, r3, #3
 80066b2:	4413      	add	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	440b      	add	r3, r1
 80066b8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	78fb      	ldrb	r3, [r7, #3]
 80066c0:	4619      	mov	r1, r3
 80066c2:	f7fe fb8d 	bl	8004de0 <USBD_LL_DataOutStage>
}
 80066c6:	bf00      	nop
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b082      	sub	sp, #8
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
 80066d6:	460b      	mov	r3, r1
 80066d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80066e0:	78fa      	ldrb	r2, [r7, #3]
 80066e2:	6879      	ldr	r1, [r7, #4]
 80066e4:	4613      	mov	r3, r2
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	4413      	add	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	440b      	add	r3, r1
 80066ee:	3320      	adds	r3, #32
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	78fb      	ldrb	r3, [r7, #3]
 80066f4:	4619      	mov	r1, r3
 80066f6:	f7fe fc26 	bl	8004f46 <USBD_LL_DataInStage>
}
 80066fa:	bf00      	nop
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b082      	sub	sp, #8
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006710:	4618      	mov	r0, r3
 8006712:	f7fe fd60 	bl	80051d6 <USBD_LL_SOF>
}
 8006716:	bf00      	nop
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b084      	sub	sp, #16
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006726:	2301      	movs	r3, #1
 8006728:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	79db      	ldrb	r3, [r3, #7]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d102      	bne.n	8006738 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006732:	2300      	movs	r3, #0
 8006734:	73fb      	strb	r3, [r7, #15]
 8006736:	e008      	b.n	800674a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	79db      	ldrb	r3, [r3, #7]
 800673c:	2b02      	cmp	r3, #2
 800673e:	d102      	bne.n	8006746 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006740:	2301      	movs	r3, #1
 8006742:	73fb      	strb	r3, [r7, #15]
 8006744:	e001      	b.n	800674a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006746:	f7f9 ff7f 	bl	8000648 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006750:	7bfa      	ldrb	r2, [r7, #15]
 8006752:	4611      	mov	r1, r2
 8006754:	4618      	mov	r0, r3
 8006756:	f7fe fcfa 	bl	800514e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8006760:	4618      	mov	r0, r3
 8006762:	f7fe fca2 	bl	80050aa <USBD_LL_Reset>
}
 8006766:	bf00      	nop
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
	...

08006770 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800677e:	4618      	mov	r0, r3
 8006780:	f7fe fcf5 	bl	800516e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	6812      	ldr	r2, [r2, #0]
 8006792:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006796:	f043 0301 	orr.w	r3, r3, #1
 800679a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	7adb      	ldrb	r3, [r3, #11]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d005      	beq.n	80067b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80067a4:	4b04      	ldr	r3, [pc, #16]	; (80067b8 <HAL_PCD_SuspendCallback+0x48>)
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	4a03      	ldr	r2, [pc, #12]	; (80067b8 <HAL_PCD_SuspendCallback+0x48>)
 80067aa:	f043 0306 	orr.w	r3, r3, #6
 80067ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80067b0:	bf00      	nop
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	e000ed00 	.word	0xe000ed00

080067bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fe fceb 	bl	80051a6 <USBD_LL_Resume>
}
 80067d0:	bf00      	nop
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80067ea:	78fa      	ldrb	r2, [r7, #3]
 80067ec:	4611      	mov	r1, r2
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fe fd43 	bl	800527a <USBD_LL_IsoOUTIncomplete>
}
 80067f4:	bf00      	nop
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800680e:	78fa      	ldrb	r2, [r7, #3]
 8006810:	4611      	mov	r1, r2
 8006812:	4618      	mov	r0, r3
 8006814:	f7fe fcff 	bl	8005216 <USBD_LL_IsoINIncomplete>
}
 8006818:	bf00      	nop
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800682e:	4618      	mov	r0, r3
 8006830:	f7fe fd55 	bl	80052de <USBD_LL_DevConnected>
}
 8006834:	bf00      	nop
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800684a:	4618      	mov	r0, r3
 800684c:	f7fe fd52 	bl	80052f4 <USBD_LL_DevDisconnected>
}
 8006850:	bf00      	nop
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d13c      	bne.n	80068e2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006868:	4a20      	ldr	r2, [pc, #128]	; (80068ec <USBD_LL_Init+0x94>)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a1e      	ldr	r2, [pc, #120]	; (80068ec <USBD_LL_Init+0x94>)
 8006874:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006878:	4b1c      	ldr	r3, [pc, #112]	; (80068ec <USBD_LL_Init+0x94>)
 800687a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800687e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006880:	4b1a      	ldr	r3, [pc, #104]	; (80068ec <USBD_LL_Init+0x94>)
 8006882:	2204      	movs	r2, #4
 8006884:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006886:	4b19      	ldr	r3, [pc, #100]	; (80068ec <USBD_LL_Init+0x94>)
 8006888:	2202      	movs	r2, #2
 800688a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800688c:	4b17      	ldr	r3, [pc, #92]	; (80068ec <USBD_LL_Init+0x94>)
 800688e:	2200      	movs	r2, #0
 8006890:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006892:	4b16      	ldr	r3, [pc, #88]	; (80068ec <USBD_LL_Init+0x94>)
 8006894:	2202      	movs	r2, #2
 8006896:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006898:	4b14      	ldr	r3, [pc, #80]	; (80068ec <USBD_LL_Init+0x94>)
 800689a:	2200      	movs	r2, #0
 800689c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800689e:	4b13      	ldr	r3, [pc, #76]	; (80068ec <USBD_LL_Init+0x94>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80068a4:	4b11      	ldr	r3, [pc, #68]	; (80068ec <USBD_LL_Init+0x94>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80068aa:	4b10      	ldr	r3, [pc, #64]	; (80068ec <USBD_LL_Init+0x94>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80068b0:	4b0e      	ldr	r3, [pc, #56]	; (80068ec <USBD_LL_Init+0x94>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80068b6:	480d      	ldr	r0, [pc, #52]	; (80068ec <USBD_LL_Init+0x94>)
 80068b8:	f7fa fab8 	bl	8000e2c <HAL_PCD_Init>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80068c2:	f7f9 fec1 	bl	8000648 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80068c6:	2180      	movs	r1, #128	; 0x80
 80068c8:	4808      	ldr	r0, [pc, #32]	; (80068ec <USBD_LL_Init+0x94>)
 80068ca:	f7fb fce2 	bl	8002292 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80068ce:	2240      	movs	r2, #64	; 0x40
 80068d0:	2100      	movs	r1, #0
 80068d2:	4806      	ldr	r0, [pc, #24]	; (80068ec <USBD_LL_Init+0x94>)
 80068d4:	f7fb fc96 	bl	8002204 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80068d8:	2280      	movs	r2, #128	; 0x80
 80068da:	2101      	movs	r1, #1
 80068dc:	4803      	ldr	r0, [pc, #12]	; (80068ec <USBD_LL_Init+0x94>)
 80068de:	f7fb fc91 	bl	8002204 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	200015fc 	.word	0x200015fc

080068f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068f8:	2300      	movs	r3, #0
 80068fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068fc:	2300      	movs	r3, #0
 80068fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006906:	4618      	mov	r0, r3
 8006908:	f7fa fb9f 	bl	800104a <HAL_PCD_Start>
 800690c:	4603      	mov	r3, r0
 800690e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006910:	7bfb      	ldrb	r3, [r7, #15]
 8006912:	4618      	mov	r0, r3
 8006914:	f000 f942 	bl	8006b9c <USBD_Get_USB_Status>
 8006918:	4603      	mov	r3, r0
 800691a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800691c:	7bbb      	ldrb	r3, [r7, #14]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	4608      	mov	r0, r1
 8006930:	4611      	mov	r1, r2
 8006932:	461a      	mov	r2, r3
 8006934:	4603      	mov	r3, r0
 8006936:	70fb      	strb	r3, [r7, #3]
 8006938:	460b      	mov	r3, r1
 800693a:	70bb      	strb	r3, [r7, #2]
 800693c:	4613      	mov	r3, r2
 800693e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006940:	2300      	movs	r3, #0
 8006942:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006944:	2300      	movs	r3, #0
 8006946:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800694e:	78bb      	ldrb	r3, [r7, #2]
 8006950:	883a      	ldrh	r2, [r7, #0]
 8006952:	78f9      	ldrb	r1, [r7, #3]
 8006954:	f7fb f873 	bl	8001a3e <HAL_PCD_EP_Open>
 8006958:	4603      	mov	r3, r0
 800695a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	4618      	mov	r0, r3
 8006960:	f000 f91c 	bl	8006b9c <USBD_Get_USB_Status>
 8006964:	4603      	mov	r3, r0
 8006966:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006968:	7bbb      	ldrb	r3, [r7, #14]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	460b      	mov	r3, r1
 800697c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800698c:	78fa      	ldrb	r2, [r7, #3]
 800698e:	4611      	mov	r1, r2
 8006990:	4618      	mov	r0, r3
 8006992:	f7fb f8bc 	bl	8001b0e <HAL_PCD_EP_Close>
 8006996:	4603      	mov	r3, r0
 8006998:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	4618      	mov	r0, r3
 800699e:	f000 f8fd 	bl	8006b9c <USBD_Get_USB_Status>
 80069a2:	4603      	mov	r3, r0
 80069a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069bc:	2300      	movs	r3, #0
 80069be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80069ca:	78fa      	ldrb	r2, [r7, #3]
 80069cc:	4611      	mov	r1, r2
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fb f974 	bl	8001cbc <HAL_PCD_EP_SetStall>
 80069d4:	4603      	mov	r3, r0
 80069d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 f8de 	bl	8006b9c <USBD_Get_USB_Status>
 80069e0:	4603      	mov	r3, r0
 80069e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80069e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	460b      	mov	r3, r1
 80069f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a08:	78fa      	ldrb	r2, [r7, #3]
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fb f9b8 	bl	8001d82 <HAL_PCD_EP_ClrStall>
 8006a12:	4603      	mov	r3, r0
 8006a14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 f8bf 	bl	8006b9c <USBD_Get_USB_Status>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a22:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	460b      	mov	r3, r1
 8006a36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006a40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	da0b      	bge.n	8006a60 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006a48:	78fb      	ldrb	r3, [r7, #3]
 8006a4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a4e:	68f9      	ldr	r1, [r7, #12]
 8006a50:	4613      	mov	r3, r2
 8006a52:	00db      	lsls	r3, r3, #3
 8006a54:	4413      	add	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	440b      	add	r3, r1
 8006a5a:	3316      	adds	r3, #22
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	e00b      	b.n	8006a78 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006a60:	78fb      	ldrb	r3, [r7, #3]
 8006a62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a66:	68f9      	ldr	r1, [r7, #12]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	4413      	add	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	440b      	add	r3, r1
 8006a72:	f203 2356 	addw	r3, r3, #598	; 0x256
 8006a76:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a90:	2300      	movs	r3, #0
 8006a92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a9e:	78fa      	ldrb	r2, [r7, #3]
 8006aa0:	4611      	mov	r1, r2
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fa ffa7 	bl	80019f6 <HAL_PCD_SetAddress>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 f874 	bl	8006b9c <USBD_Get_USB_Status>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ab8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b086      	sub	sp, #24
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	60f8      	str	r0, [r7, #12]
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	603b      	str	r3, [r7, #0]
 8006ace:	460b      	mov	r3, r1
 8006ad0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006ae0:	7af9      	ldrb	r1, [r7, #11]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	f7fb f8af 	bl	8001c48 <HAL_PCD_EP_Transmit>
 8006aea:	4603      	mov	r3, r0
 8006aec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006aee:	7dfb      	ldrb	r3, [r7, #23]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 f853 	bl	8006b9c <USBD_Get_USB_Status>
 8006af6:	4603      	mov	r3, r0
 8006af8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006afa:	7dbb      	ldrb	r3, [r7, #22]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3718      	adds	r7, #24
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	607a      	str	r2, [r7, #4]
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	460b      	mov	r3, r1
 8006b12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006b22:	7af9      	ldrb	r1, [r7, #11]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	f7fb f83b 	bl	8001ba2 <HAL_PCD_EP_Receive>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b30:	7dfb      	ldrb	r3, [r7, #23]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 f832 	bl	8006b9c <USBD_Get_USB_Status>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006b3c:	7dbb      	ldrb	r3, [r7, #22]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b082      	sub	sp, #8
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b58:	78fa      	ldrb	r2, [r7, #3]
 8006b5a:	4611      	mov	r1, r2
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fb f85b 	bl	8001c18 <HAL_PCD_EP_GetRxCount>
 8006b62:	4603      	mov	r3, r0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006b74:	4b03      	ldr	r3, [pc, #12]	; (8006b84 <USBD_static_malloc+0x18>)
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	20001ae0 	.word	0x20001ae0

08006b88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]

}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006baa:	79fb      	ldrb	r3, [r7, #7]
 8006bac:	2b03      	cmp	r3, #3
 8006bae:	d817      	bhi.n	8006be0 <USBD_Get_USB_Status+0x44>
 8006bb0:	a201      	add	r2, pc, #4	; (adr r2, 8006bb8 <USBD_Get_USB_Status+0x1c>)
 8006bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb6:	bf00      	nop
 8006bb8:	08006bc9 	.word	0x08006bc9
 8006bbc:	08006bcf 	.word	0x08006bcf
 8006bc0:	08006bd5 	.word	0x08006bd5
 8006bc4:	08006bdb 	.word	0x08006bdb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	73fb      	strb	r3, [r7, #15]
    break;
 8006bcc:	e00b      	b.n	8006be6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	73fb      	strb	r3, [r7, #15]
    break;
 8006bd2:	e008      	b.n	8006be6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8006bd8:	e005      	b.n	8006be6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	73fb      	strb	r3, [r7, #15]
    break;
 8006bde:	e002      	b.n	8006be6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006be0:	2303      	movs	r3, #3
 8006be2:	73fb      	strb	r3, [r7, #15]
    break;
 8006be4:	bf00      	nop
  }
  return usb_status;
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <memset>:
 8006bf4:	4402      	add	r2, r0
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d100      	bne.n	8006bfe <memset+0xa>
 8006bfc:	4770      	bx	lr
 8006bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8006c02:	e7f9      	b.n	8006bf8 <memset+0x4>

08006c04 <__libc_init_array>:
 8006c04:	b570      	push	{r4, r5, r6, lr}
 8006c06:	4d0d      	ldr	r5, [pc, #52]	; (8006c3c <__libc_init_array+0x38>)
 8006c08:	4c0d      	ldr	r4, [pc, #52]	; (8006c40 <__libc_init_array+0x3c>)
 8006c0a:	1b64      	subs	r4, r4, r5
 8006c0c:	10a4      	asrs	r4, r4, #2
 8006c0e:	2600      	movs	r6, #0
 8006c10:	42a6      	cmp	r6, r4
 8006c12:	d109      	bne.n	8006c28 <__libc_init_array+0x24>
 8006c14:	4d0b      	ldr	r5, [pc, #44]	; (8006c44 <__libc_init_array+0x40>)
 8006c16:	4c0c      	ldr	r4, [pc, #48]	; (8006c48 <__libc_init_array+0x44>)
 8006c18:	f000 f818 	bl	8006c4c <_init>
 8006c1c:	1b64      	subs	r4, r4, r5
 8006c1e:	10a4      	asrs	r4, r4, #2
 8006c20:	2600      	movs	r6, #0
 8006c22:	42a6      	cmp	r6, r4
 8006c24:	d105      	bne.n	8006c32 <__libc_init_array+0x2e>
 8006c26:	bd70      	pop	{r4, r5, r6, pc}
 8006c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c2c:	4798      	blx	r3
 8006c2e:	3601      	adds	r6, #1
 8006c30:	e7ee      	b.n	8006c10 <__libc_init_array+0xc>
 8006c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c36:	4798      	blx	r3
 8006c38:	3601      	adds	r6, #1
 8006c3a:	e7f2      	b.n	8006c22 <__libc_init_array+0x1e>
 8006c3c:	08006cd4 	.word	0x08006cd4
 8006c40:	08006cd4 	.word	0x08006cd4
 8006c44:	08006cd4 	.word	0x08006cd4
 8006c48:	08006cd8 	.word	0x08006cd8

08006c4c <_init>:
 8006c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4e:	bf00      	nop
 8006c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c52:	bc08      	pop	{r3}
 8006c54:	469e      	mov	lr, r3
 8006c56:	4770      	bx	lr

08006c58 <_fini>:
 8006c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5a:	bf00      	nop
 8006c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5e:	bc08      	pop	{r3}
 8006c60:	469e      	mov	lr, r3
 8006c62:	4770      	bx	lr
